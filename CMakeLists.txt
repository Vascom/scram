cmake_minimum_required(VERSION 2.8.12)

# In-source build prevention.
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
  message(STATUS "SCRAM requires an out-of-source build.")
  message(STATUS "Please remove these files from ${CMAKE_BINARY_DIR} first:")
  message(STATUS "CMakeCache.txt")
  message(STATUS "CMakeFiles")
  message(STATUS "Once these files are removed, create a separate directory")
  message(STATUS "and run CMake from there.")
  message(FATAL_ERROR "in-source build detected")
endif()

project(SCRAM)
set(SCRAM_VERSION_MAJOR 0)  # Indicate major API change after 1.0.0
set(SCRAM_VERSION_MINOR 15)  # New features and improvements.
set(SCRAM_VERSION_MICRO 0)  # Bug fixes.

####################### Begin Options ###################

option(BUILD_SHARED_LIBS OFF)

option(INSTALL_LIBS "Install the generated libraries" ${BUILD_SHARED_LIBS})

# Linking of external libraries, such as BOOST.
option(WITH_STATIC_LIBS "Try to link against static libraries" OFF)

option(WITH_TCMALLOC "Use TCMalloc if available (#1 preference)" ON)
option(WITH_JEMALLOC "Use JEMalloc if available (#2 preference)" ON)

option(WITH_COVERAGE "Instrument for coverage analysis" OFF)
option(WITH_PROFILE "Instrument for performance profiling" OFF)

option(HAS_TANGO "The system provides the fall-back Tango icons" OFF)

option(BUILD_GUI "Build the GUI front-end" ON)
option(BUILD_TESTS "Build the tests" ON)

option(PACKAGE "Package for distribution" OFF)

####################### End Options ###################

####################### Begin compiler configurations ###################

# Default to C++14.
if(CMAKE_VERSION VERSION_LESS 3.1)
  include(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++1y" COMPILER_SUPPORTS_CXX14)
  if(NOT COMPILER_SUPPORTS_CXX14)
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++14 support.")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y")
else()
  set(CMAKE_CXX_STANDARD 14)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

function(CHECK_COMPILER_VERSION MIN_VERSION)
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS MIN_VERSION)
    message(FATAL_ERROR "${CMAKE_CXX_COMPILER_ID} Compiler version too old. Required minimum version: ${MIN_VERSION}")
  endif()
endfunction()

set(CMAKE_CXX_FLAGS_DEBUG
  "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Werror -Wno-sign-compare -Wnon-virtual-dtor -Wno-missing-field-initializers -Wold-style-cast")

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  CHECK_COMPILER_VERSION("4.9")  # TODO: Wpedantic with gcc 4.9 errors with default arg lambdas.
  set(CMAKE_CXX_FLAGS_DEBUG
    "${CMAKE_CXX_FLAGS_DEBUG} -Wredundant-decls -Wcast-align -Wlogical-op -Wvla -Wuseless-cast -Wunreachable-code")

  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wshadow -Wpedantic -Wmissing-declarations")
  endif()

elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  CHECK_COMPILER_VERSION("3.6")
  set(CMAKE_CXX_FLAGS_DEBUG
    "${CMAKE_CXX_FLAGS_DEBUG} -Wno-missing-braces -Wshadow -Wunused-exception-parameter")

elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
  CHECK_COMPILER_VERSION("6.1")

elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  CHECK_COMPILER_VERSION("17.0.2")
  # TODO: CMAKE_CXX_STANDARD has no effect on icc.
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
  # TODO: Warning with overload of private override.
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -diag-disable=1125")
endif()

if(WIN32)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wno-error")
endif()

######################## End compiler configurations ####################

##################### Begin cmake configuration ###################

# Set project directories.
set(PROJECT_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(SCRAM_SOURCE_DIR "${PROJECT_SOURCE_DIR}/src")
set(SCRAM_GUI_DIR "${PROJECT_SOURCE_DIR}/gui")
set(SCRAM_TEST_DIR "${PROJECT_SOURCE_DIR}/tests")

# Setup build locations.
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${SCRAM_BINARY_DIR}/bin")
endif()
if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${SCRAM_BINARY_DIR}/lib/scram")
endif()
if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${SCRAM_BINARY_DIR}/lib/scram")
endif()

set(SCRAM_EXECUTABLE_DIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

# Use, i.e. don't skip the full RPATH for the build tree.
set(CMAKE_SKIP_BUILD_RPATH FALSE)

# When building,
# don't use the install RPATH already
# (but later on when installing).
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

if(INSTALL_LIBS)
  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib/scram")
endif()

# Add the automatically determined parts of the RPATH,
# which point to directories outside the build tree
# to the install RPATH.
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Tell CMake where the modules are.
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

######################## End cmake configuration ###################

######################## Begin find libraries ######################

set(MALLOC "System Malloc")
# Optional alternative Malloc for optimization.
if(NOT WITH_PROFILE)
  find_package(Tcmalloc)
  find_package(JeMalloc)
  if(WITH_TCMALLOC AND Tcmalloc_FOUND)
    set(LIBS ${LIBS} ${Tcmalloc_LIBRARIES})
    set(MALLOC "TCMalloc")
  elseif(WITH_JEMALLOC AND JEMALLOC_FOUND)
    set(LIBS ${LIBS} ${JEMALLOC_LIBRARIES})
    set(MALLOC "JEMalloc")
  endif()
endif()
message(STATUS "The memory allocator: ${MALLOC}")

# Find LibXML2 and dependencies.
find_package(LibXml2 REQUIRED)
set(LIBS ${LIBS} ${LIBXML2_LIBRARIES})

message(STATUS ${LIBS})

# Include the boost header files and the program_options library.
# Please be sure to use Boost rather than BOOST.
# Capitalization matters on some platforms.
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(BOOST_MIN_VERSION "1.58.0")
  set(LIBS ${LIBS} ${CMAKE_DL_LIBS})
else()
  set(BOOST_MIN_VERSION "1.61.0")
endif()
set(Boost_USE_STATIC_LIBS ${WITH_STATIC_LIBS})
set(Boost_USE_STATIC_RUNTIME ${WITH_STATIC_LIBS})

if(NOT WIN32)
  set(Boost_USE_MULTITHREADED OFF)
endif()

unset(Boost_INCLUDE_DIR CACHE)
unset(Boost_LIBRARY_DIRS CACHE)
find_package(Boost ${BOOST_MIN_VERSION} COMPONENTS
  program_options filesystem system date_time random
  REQUIRED)

if(Boost_USE_STATIC_LIBS)
  message(STATUS "Linking against boost static libraries")
else()
  message(STATUS "Linking against boost dynamic libraries")
endif()

if(Boost_ROOT)
  message(STATUS "    Boost Root: ${Boost_ROOT}")
endif()
message(STATUS "    Boost Include directory: ${Boost_INCLUDE_DIR}")
message(STATUS "    Boost Library directories: ${Boost_LIBRARY_DIRS}")

set(LIBS ${LIBS} ${Boost_PROGRAM_OPTIONS_LIBRARY})
message(STATUS "    Boost Program Options location: ${Boost_PROGRAM_OPTIONS_LIBRARY}")
set(LIBS ${LIBS} ${Boost_SYSTEM_LIBRARY})
message(STATUS "    Boost System location: ${Boost_SYSTEM_LIBRARY}")
set(LIBS ${LIBS} ${Boost_FILESYSTEM_LIBRARY})
message(STATUS "    Boost Filesystem location: ${Boost_FILESYSTEM_LIBRARY}")
set(LIBS ${LIBS} ${Boost_DATE_TIME_LIBRARY})
message(STATUS "    Boost Date-Time location: ${Boost_DATE_TIME_LIBRARY}")

########################## End of find libraries ########################

########################## Begin includes ###############################

# Include all the discovered system directories.
include_directories(SYSTEM "${Boost_INCLUDE_DIR}")
include_directories(SYSTEM "${LIBXML2_INCLUDE_DIR}")

include_directories("${PROJECT_SOURCE_DIR}")  # Include the core headers via "src".

add_subdirectory("${SCRAM_SOURCE_DIR}")

if(BUILD_GUI)
  add_subdirectory("${SCRAM_GUI_DIR}")
endif()

if(BUILD_TESTS)
  add_subdirectory("${SCRAM_TEST_DIR}")
endif()

####################### End includes ####################################

###################### Begin uninstall target ###########################

configure_file(
  "${PROJECT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY
  )

add_custom_target(uninstall
  COMMAND "${CMAKE_COMMAND}" -P "\"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"")

###################### End uninstall target #############################

###################### Begin CPACK configurations ###########################

if(PACKAGE)
  if(WIN32)
    set(CPACK_GENERATOR "NSIS")
    # set(CPACK_PACKAGE_ICON "${PROJECT_SOURCE_DIR}\\\\gui\\\\images\\\\scram_logo.bmp")
    set(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\scram-gui.exe")
    set(CPACK_NSIS_MODIFY_PATH ON)
    set(CPACK_NSIS_HELP_LINK "https://scram-pra.org")
    set(CPACK_NSIS_URL_INFO_ABOUT "https://scram-pra.org")
    set(CPACK_NSIS_CONTACT "scram-users@googlegroups.com")
    set(CPACK_PACKAGE_EXECUTABLES "scram-gui" "SCRAM")
    set(CPACK_CREATE_DESKTOP_LINKS "scram-gui")
    set(CPACK_COMPONENT_GUI_REQUIRED ON)
    # The following configuration assumes MinGW64 is setup specifically for this project.
    get_filename_component(MINGW_DLL_DIR "${CMAKE_CXX_COMPILER}" PATH)
    message(STATUS "MinGW bin location: ${MINGW_DLL_DIR}")
    include(ScramBundle)
    get_scram_prerequisites(SCRAM_PREREQUISITES
      "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/scram.exe" "${MINGW_DLL_DIR}")
    install(FILES
      ${SCRAM_PREREQUISITES}
      DESTINATION bin COMPONENT libraries
    )
    get_scram_prerequisites(SCRAM_GUI_PREREQUISITES
      "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/scram-gui.exe" "${MINGW_DLL_DIR}")
    install(FILES
      ${SCRAM_GUI_PREREQUISITES}
      DESTINATION bin COMPONENT libraries
    )
  endif()
endif()

set(CPACK_PACKAGE_VENDOR "Olzhas Rakhimov")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Probabilistic risk analysis tool")
set(CPACK_PACKAGE_VERSION_MAJOR "${SCRAM_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${SCRAM_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${SCRAM_VERSION_MICRO}")
set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")

set(CPACK_STRIP_FILES ON)

set(CPACK_COMPONENTS_ALL scram libraries gui examples)
set(CPACK_COMPONENT_SCRAM_REQUIRED ON)
set(CPACK_COMPONENT_LIBRARIES_REQUIRED ON)

include(CPack)

###################### End CPACK configurations #############################
