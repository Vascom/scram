<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>linear_set.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aff658140b5e7b3b627b7275c534a858.xhtml">ext</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">linear_set.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="linear__set_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of a vector-based set for a small number of entries.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceext.xhtml">ext</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/// Identity functor.</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structext_1_1identity.xhtml">   31</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structext_1_1identity.xhtml">identity</a> {<span class="comment"></span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">  /// Identity for non-rvalue objects only.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="structext_1_1identity.xhtml#a0e8c933da4686e8953845bb098105067">   34</a></span>&#160;  T&amp; <a class="code" href="structext_1_1identity.xhtml#a0e8c933da4686e8953845bb098105067">operator()</a>(T&amp; arg)<span class="keyword"> const </span>{  <span class="comment">// NOLINT</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> arg;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;};</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// An adaptor set with lookup complexity O(N)</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// based on sequence (contiguous structure by default).</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// This set is designed for a small number of elements.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// Consider this class a convenient wrapper around std::vector&lt;Value&gt;.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// Since this set is based on the vector by default,</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// the order of insertions is preserved,</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// and it provides random access iterators.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// Unlike STL sets,</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/// this set is designed like boost::multi_index or Python sets;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// that is, there is key retrieval (indexation) policy for values.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// Therefore, this set also acts like a map.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// The major differences from the standard library sets:</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">///   0. Values are not const.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">///   1. Iterators, references, pointers can be invalidated</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">///      by modifier functions (insert, erase, reserve, etc.).</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">///      This is the inherited behavior from std::vector.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">///   2. Some API may be extra or missing.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">///   3. Key extraction is not stored as member data.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">///      Instead, it is treated as a policy.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/// The performance of the set critically depends on the number of entries,</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// the size of the value, and the cost of comparing values for equality.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// The advantage of the linear_set comes from cache-friendliness,</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// and fewer CPU front-end and back-end stalls.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// @tparam Value  The type of the values.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// @tparam KeyFromValue  The key extraction functor.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// @tparam Sequence  The underlying container type.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value, <span class="keyword">typename</span> KeyFromValue = <a class="code" href="structext_1_1identity.xhtml">identity</a>,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;          <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">class </span>Sequence = std::vector&gt;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml">   76</a></span>&#160;<span class="keyword">class </span><a class="code" href="classext_1_1linear__set.xhtml">linear_set</a> {<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// Non-member equality test operators.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// The complexity is O(N^2).</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @param[in] lhs  First set.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// @param[in] rhs  Second set.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @note The order of elements is not relevant.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  ///       If the order matters for equality,</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  ///       compare the underlying data containers directly.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a1b51a04e0aa75b25ac2b9148020cea77">   88</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__set.xhtml#a1b51a04e0aa75b25ac2b9148020cea77">operator==</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; rhs) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (lhs.<a class="code" href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">size</a>() != rhs.<a class="code" href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">size</a>())</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> std::all_of(lhs.<a class="code" href="classext_1_1linear__set.xhtml#a5d6cd826ff28591b8c2dcd68f0f52e81">begin</a>(), lhs.<a class="code" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">end</a>(), [&amp;rhs](<span class="keyword">const</span> Value&amp; value) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keywordflow">return</span> rhs.count_value(value);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    });</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  }</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#af08bdd86d73ca92187b65e1ded716981">   95</a></span>&#160;  <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__set.xhtml#af08bdd86d73ca92187b65e1ded716981">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; rhs) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> !(lhs == rhs);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// Friend swap definition for convenience sake.</span></div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ab2eac7920acba8cbe6cf2018306ece46">  101</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__set.xhtml#ab2eac7920acba8cbe6cf2018306ece46">swap</a>(<a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; lhs, <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; rhs) noexcept { lhs.swap(rhs); }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// Public typedefs similar to standard sets.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">  106</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a> = KeyFromValue;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">  107</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> = Value;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> = std::decay_t&lt;decltype(</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">  109</a></span>&#160;      <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(*static_cast&lt;value_type*&gt;(<span class="keyword">nullptr</span>)))&gt;;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">  110</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a> = Sequence&lt;value_type&gt;;<span class="comment"></span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// Iterator-related typedefs redeclared from the underlying container type.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#add164163af1da17817fdeec2db3033ed">  115</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#add164163af1da17817fdeec2db3033ed">pointer</a> = <span class="keyword">typename</span> container_type::pointer;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a2128280c348a735ceb63d37af7ee698b">  116</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a2128280c348a735ceb63d37af7ee698b">const_pointer</a> = <span class="keyword">typename</span> container_type::const_pointer;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ae5e741e049c0b26d36dcbb0e26597b58">  117</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#ae5e741e049c0b26d36dcbb0e26597b58">reference</a> = <span class="keyword">typename</span> container_type::reference;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a40e8ce077a71da6af38035d0bd0da909">  118</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a40e8ce077a71da6af38035d0bd0da909">const_reference</a> = <span class="keyword">typename</span> container_type::const_reference;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">  119</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> = <span class="keyword">typename</span> container_type::iterator;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">  120</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> = <span class="keyword">typename</span> container_type::const_iterator;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">  121</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a> = <span class="keyword">typename</span> container_type::reverse_iterator;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> =</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">  123</a></span>&#160;      <span class="keyword">typename</span> container_type::const_reverse_iterator;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">  124</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> = <span class="keyword">typename</span> container_type::size_type;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ae47e07887da12c58b88dedfad119cc60">  125</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml#ae47e07887da12c58b88dedfad119cc60">difference_type</a> = <span class="keyword">typename</span> container_type::difference_type;<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  /// Standard constructors (copy and move are implicit).</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a6ab625e16e71548d77393733086cfa0a">  131</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a6ab625e16e71548d77393733086cfa0a">linear_set</a>(std::initializer_list&lt;value_type&gt; init_list) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">linear_set::insert</a>(init_list.begin(), init_list.end());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a2a392ab7d8e3d5918c4923e380f3ba83">  136</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a2a392ab7d8e3d5918c4923e380f3ba83">linear_set</a>(Iterator first1, Iterator last1) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">linear_set::insert</a>(first1, last1);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// @returns Value-to-key converter.</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a51ce6ea725aac08f4b15a1741b629bd5">  142</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a> <a class="code" href="classext_1_1linear__set.xhtml#a51ce6ea725aac08f4b15a1741b629bd5">key_extractor</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>(); }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// Finds an entry in the set by key.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  /// @returns Iterator pointing to the entry,</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  ///          or end() if not found.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">  151</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">find</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a>&amp; key)<span class="keyword"> const </span>{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> std::find_if(set_.cbegin(), set_.cend(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        [&amp;key](<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                          <span class="keywordflow">return</span> key == <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(value);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        });</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a79c2cb408e4023d7c707ada979e9fef3">  158</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a79c2cb408e4023d7c707ada979e9fef3">find</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a>&amp; key) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> std::find_if(set_.begin(), set_.end(),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        [&amp;key](<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                          <span class="keywordflow">return</span> key == <a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(value);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        });</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  /// Determines if an entry in the set.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// @returns 1 if there&#39;s an entry,</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  ///          0 otherwise.</span></div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a0f3a1810658f8464438f195b876bd9bf">  172</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="code" href="classext_1_1linear__set.xhtml#a0f3a1810658f8464438f195b876bd9bf">count</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a>&amp; key)<span class="keyword"> const </span>{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">linear_set::find</a>(key) != set_.end();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">  /// Inserts a value into the set</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// if the equal value is not in the set.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  /// @param[in] value  The new value to be inserted.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  /// @returns A pair of an iterator and insertion flag.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  ///          The iterator points to possibly inserted entry,</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">  ///          and the flag indicates whether the entry is actually inserted.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">  185</a></span>&#160;<span class="comment"></span>  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">insert</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">auto</span> it = linear_set::find_value(value);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (it != set_.end())</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    set_.push_back(value);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> {std::prev(set_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#abad7da128c7a2b33787f4688ddc93ef5">  193</a></span>&#160;  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__set.xhtml#abad7da128c7a2b33787f4688ddc93ef5">insert</a>(<a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp;&amp; value) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">auto</span> it = linear_set::find_value(value);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">if</span> (it != set_.end())</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    set_.emplace_back(std::forward&lt;value_type&gt;(value));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> {std::prev(set_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">  /// Inserts a range of elements.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">  /// The range is not assumed to be unique.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  /// @tparam Iterator  Iterator to the container with values.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// @param[in] first1  The beginning of the range.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  /// @param[in] last1  The end of the range.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ae06fae52a107a86748b4f42ba5228731">  210</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__set.xhtml#ae06fae52a107a86748b4f42ba5228731">insert</a>(Iterator first1, Iterator last1) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">for</span> (; first1 != last1; ++first1) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="keywordflow">if</span> (!linear_set::count_value(*first1))</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        set_.push_back(*first1);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// Attempts to build and insert an entry.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  /// @param[in] args  Arguments for the construction of the entry.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  /// @returns An iterator pointing to the entry,</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">  ///          and a flag indicating if the insertion actually happened.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ac75cad225076e020d763915848242ec8">  224</a></span>&#160;  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__set.xhtml#ac75cad225076e020d763915848242ec8">emplace</a>(Ts&amp;&amp;... args) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> value(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">auto</span> it = linear_set::find_value(value);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">if</span> (it != set_.end())</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    set_.emplace_back(std::move(value));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> {std::prev(set_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// Erases the entry pointed by an iterator.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// @param[in] pos  An iterator pointing to the entry.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// @returns An iterator pointing after the entry.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a83e0ac9e967737c9c15ead98e5f460fa">  240</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a83e0ac9e967737c9c15ead98e5f460fa">erase</a>(<a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> pos) { <span class="keywordflow">return</span> set_.erase(pos); }</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a085cc1d33bddedf017a936b066e232d0">  241</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a085cc1d33bddedf017a936b066e232d0">erase</a>(<a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> pos) { <span class="keywordflow">return</span> set_.erase(pos); }<span class="comment"></span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">  /// Erases the entry with a key.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">  /// @returns 1 if the existing entry has been removed,</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  ///          0 if there&#39;s no entry with the given key.</span></div><div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a1a08e9373da1ab3b63d05ddc0e75381b">  250</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="code" href="classext_1_1linear__set.xhtml#a1a08e9373da1ab3b63d05ddc0e75381b">erase</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a>&amp; key) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> it = <a class="code" href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">linear_set::find</a>(key);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">if</span> (it == set_.end())</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classext_1_1linear__set.xhtml#a83e0ac9e967737c9c15ead98e5f460fa">linear_set::erase</a>(it);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">  /// Swaps data with another linear set.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">  /// @param[in] other  Another linear set.</span></div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#abacf20e6be51e53d92ac985ca1b305cf">  261</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__set.xhtml#abacf20e6be51e53d92ac985ca1b305cf">swap</a>(<a class="code" href="classext_1_1linear__set.xhtml">linear_set</a>&amp; other) noexcept { set_.swap(other.set_); }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">  /// @returns The number of entries in the set.</span></div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">  264</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="code" href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.size(); }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">  /// @returns true if there are no entries.</span></div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a55ea71f293335ffde9c4176f56b528f2">  267</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__set.xhtml#a55ea71f293335ffde9c4176f56b528f2">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.empty(); }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// Erases all entries in the set.</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a34403cb0a669f165c50673b98a610d2d">  270</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__set.xhtml#a34403cb0a669f165c50673b98a610d2d">clear</a>() noexcept { set_.clear(); }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">  /// Prepares the linear set for a specified number of entries.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// @param[in] n  The number of expected entries.</span></div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ab3e852c12ea7751ce992f5c814fb49fb">  275</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__set.xhtml#ab3e852c12ea7751ce992f5c814fb49fb">reserve</a>(<a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> n) { set_.reserve(n); }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  /// @returns The capacity of the underlying container.</span></div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#af35d5d142b4f59aff56a3bac69d1ce1a">  278</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="code" href="classext_1_1linear__set.xhtml#af35d5d142b4f59aff56a3bac69d1ce1a">capacity</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.capacity(); }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">  /// @returns The underlying data container.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">  ///          The container elements are ordered exactly as inserted.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#aba3e3a6085b29b9ed94956d07abd19fd">  283</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a>&amp; <a class="code" href="classext_1_1linear__set.xhtml#aba3e3a6085b29b9ed94956d07abd19fd">data</a>() { <span class="keywordflow">return</span> set_; }</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#aae9aa2b3ebf2e32189bf0a51a8a4ff11">  284</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a>&amp; <a class="code" href="classext_1_1linear__set.xhtml#aae9aa2b3ebf2e32189bf0a51a8a4ff11">data</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_; }<span class="comment"></span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">  /// @returns A read/write iterator pointing to the first entry.</span></div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a5d6cd826ff28591b8c2dcd68f0f52e81">  288</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a5d6cd826ff28591b8c2dcd68f0f52e81">begin</a>() { <span class="keywordflow">return</span> set_.begin(); }<span class="comment"></span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">  /// @returns A read/write iterator pointing one past the last entry.</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">  290</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">end</a>() { <span class="keywordflow">return</span> set_.end(); }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// @returns A read-only iterator pointing to the first entry.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a0a3c4b80965c3ad70f6a44371f9fcaa1">  295</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a0a3c4b80965c3ad70f6a44371f9fcaa1">cbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.cbegin(); }</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a6d746768a670c3056e89f098e75ebb02">  296</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a6d746768a670c3056e89f098e75ebb02">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.cbegin(); }<span class="comment"></span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">  /// @returns A read-only iterator pointing one past the last entry.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a0b995091d228291150ef7410f7c4af36">  302</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a0b995091d228291150ef7410f7c4af36">cend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.cend(); }</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ad3446ce7b3f8775497a4e1d28103ec89">  303</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#ad3446ce7b3f8775497a4e1d28103ec89">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.cend(); }<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">  /// Corresponding reverse iterators.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a1ec6c7d6bef546a38df9475bc24d02c7">  309</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a1ec6c7d6bef546a38df9475bc24d02c7">rbegin</a>() { <span class="keywordflow">return</span> set_.rbegin(); }</div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#acc9acd3ca6dc763bca877bcbd1116089">  310</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#acc9acd3ca6dc763bca877bcbd1116089">rend</a>() { <span class="keywordflow">return</span> set_.rend(); }</div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a45c1faeb27d9343ef2657ab42811258c">  311</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a45c1faeb27d9343ef2657ab42811258c">crbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.crbegin(); }</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a13135d42b1858d0ac12aaff2165505ed">  312</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a13135d42b1858d0ac12aaff2165505ed">rbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.crbegin(); }</div><div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#a70058f2004fda0afb6936e1d8c203d76">  313</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#a70058f2004fda0afb6936e1d8c203d76">crend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.crend(); }</div><div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="classext_1_1linear__set.xhtml#ad5ff6a309c8291909fd38cb55c338e8e">  314</a></span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__set.xhtml#ad5ff6a309c8291909fd38cb55c338e8e">rend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> set_.crend(); }<span class="comment"></span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  /// Finds an entry in the set by value.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">  /// @param[in] value  The value of the entry.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">  /// @returns Iterator pointing to the entry with an equivalent value,</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  ///          or end() if not found.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> find_value(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value)<span class="keyword"> const </span>{</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="find__iterator_8h.xhtml#af799a4bf0fb6e725ac630aaa0c7d03a9">find</a>(<a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(value));</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> find_value(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value) {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="find__iterator_8h.xhtml#af799a4bf0fb6e725ac630aaa0c7d03a9">find</a>(<a class="code" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(value));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">  /// Determines if an entry in the set by value.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">  /// @param[in] value  The value of the entry.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">  /// @returns 1 if there&#39;s an entry,</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">  ///          0 otherwise.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> count_value(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a>&amp; value)<span class="keyword"> const </span>{</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> linear_set::find_value(value) != set_.end();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <a class="code" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a> set_;  <span class="comment">///&lt; The main underlying data container.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}  <span class="comment">// namespace ext</span></div><div class="ttc" id="classext_1_1linear__set_xhtml_a0a3c4b80965c3ad70f6a44371f9fcaa1"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a0a3c4b80965c3ad70f6a44371f9fcaa1">ext::linear_set::cbegin</a></div><div class="ttdeci">const_iterator cbegin() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00295">linear_set.h:295</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_af08bdd86d73ca92187b65e1ded716981"><div class="ttname"><a href="classext_1_1linear__set.xhtml#af08bdd86d73ca92187b65e1ded716981">ext::linear_set::operator!=</a></div><div class="ttdeci">friend bool operator!=(const linear_set &amp;lhs, const linear_set &amp;rhs)</div><div class="ttdoc">Non-member equality test operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00095">linear_set.h:95</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a83e0ac9e967737c9c15ead98e5f460fa"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a83e0ac9e967737c9c15ead98e5f460fa">ext::linear_set::erase</a></div><div class="ttdeci">iterator erase(const_iterator pos)</div><div class="ttdoc">Erases the entry pointed by an iterator. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00240">linear_set.h:240</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a155eaa9a4cd913286959ad03f01e2306"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">ext::linear_set::end</a></div><div class="ttdeci">iterator end()</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00290">linear_set.h:290</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a45c1faeb27d9343ef2657ab42811258c"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a45c1faeb27d9343ef2657ab42811258c">ext::linear_set::crbegin</a></div><div class="ttdeci">const_reverse_iterator crbegin() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00311">linear_set.h:311</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ae5e741e049c0b26d36dcbb0e26597b58"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ae5e741e049c0b26d36dcbb0e26597b58">ext::linear_set&lt; Attribute, AttributeKey &gt;::reference</a></div><div class="ttdeci">typename container_type::reference reference</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00117">linear_set.h:117</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a0f3a1810658f8464438f195b876bd9bf"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a0f3a1810658f8464438f195b876bd9bf">ext::linear_set::count</a></div><div class="ttdeci">size_type count(const key_type &amp;key) const </div><div class="ttdoc">Determines if an entry in the set. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00172">linear_set.h:172</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_add164163af1da17817fdeec2db3033ed"><div class="ttname"><a href="classext_1_1linear__set.xhtml#add164163af1da17817fdeec2db3033ed">ext::linear_set&lt; Attribute, AttributeKey &gt;::pointer</a></div><div class="ttdeci">typename container_type::pointer pointer</div><div class="ttdoc">Iterator-related typedefs redeclared from the underlying container type. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00115">linear_set.h:115</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a51ce6ea725aac08f4b15a1741b629bd5"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a51ce6ea725aac08f4b15a1741b629bd5">ext::linear_set::key_extractor</a></div><div class="ttdeci">key_from_value key_extractor() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00142">linear_set.h:142</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_af73748cef52d3584358a22672af895cf"><div class="ttname"><a href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">ext::linear_set&lt; Attribute, AttributeKey &gt;::key_from_value</a></div><div class="ttdeci">AttributeKey key_from_value</div><div class="ttdoc">Public typedefs similar to standard sets. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00106">linear_set.h:106</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a16d63e209ee9d60bafb48dbf3c91ca5a"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">ext::linear_set::size</a></div><div class="ttdeci">size_type size() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00264">linear_set.h:264</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a55ea71f293335ffde9c4176f56b528f2"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a55ea71f293335ffde9c4176f56b528f2">ext::linear_set::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00267">linear_set.h:267</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ad95c58e17580f18a7def2122e60c6c21"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">ext::linear_set&lt; Attribute, AttributeKey &gt;::iterator</a></div><div class="ttdeci">typename container_type::iterator iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00119">linear_set.h:119</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml_af799a4bf0fb6e725ac630aaa0c7d03a9"><div class="ttname"><a href="find__iterator_8h.xhtml#af799a4bf0fb6e725ac630aaa0c7d03a9">ext::find</a></div><div class="ttdeci">auto find(T &amp;&amp;container, Arg &amp;&amp;arg)</div><div class="ttdoc">Wraps container::find() calls for convenient and efficient lookup with find_iterator adaptor...</div><div class="ttdef"><b>Definition:</b> <a href="find__iterator_8h_source.xhtml#l00059">find_iterator.h:59</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a79c2cb408e4023d7c707ada979e9fef3"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a79c2cb408e4023d7c707ada979e9fef3">ext::linear_set::find</a></div><div class="ttdeci">iterator find(const key_type &amp;key)</div><div class="ttdoc">Finds an entry in the set by key. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00158">linear_set.h:158</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a1b51a04e0aa75b25ac2b9148020cea77"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a1b51a04e0aa75b25ac2b9148020cea77">ext::linear_set::operator==</a></div><div class="ttdeci">friend bool operator==(const linear_set &amp;lhs, const linear_set &amp;rhs)</div><div class="ttdoc">Non-member equality test operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00088">linear_set.h:88</a></div></div>
<div class="ttc" id="namespaceext_xhtml"><div class="ttname"><a href="namespaceext.xhtml">ext</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.xhtml#l00027">algorithm.h:27</a></div></div>
<div class="ttc" id="structext_1_1identity_xhtml_a0e8c933da4686e8953845bb098105067"><div class="ttname"><a href="structext_1_1identity.xhtml#a0e8c933da4686e8953845bb098105067">ext::identity::operator()</a></div><div class="ttdeci">T &amp; operator()(T &amp;arg) const </div><div class="ttdoc">Identity for non-rvalue objects only. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00034">linear_set.h:34</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_aae9aa2b3ebf2e32189bf0a51a8a4ff11"><div class="ttname"><a href="classext_1_1linear__set.xhtml#aae9aa2b3ebf2e32189bf0a51a8a4ff11">ext::linear_set::data</a></div><div class="ttdeci">const container_type &amp; data() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00284">linear_set.h:284</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a1014e3f486dd597b28aa4ff70822a31e"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">ext::linear_set&lt; Attribute, AttributeKey &gt;::key_type</a></div><div class="ttdeci">std::decay_t&lt; decltype(key_from_value()(*static_cast&lt; value_type * &gt;(nullptr)))&gt; key_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00109">linear_set.h:109</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a13135d42b1858d0ac12aaff2165505ed"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a13135d42b1858d0ac12aaff2165505ed">ext::linear_set::rbegin</a></div><div class="ttdeci">const_reverse_iterator rbegin() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00312">linear_set.h:312</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a70058f2004fda0afb6936e1d8c203d76"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a70058f2004fda0afb6936e1d8c203d76">ext::linear_set::crend</a></div><div class="ttdeci">const_reverse_iterator crend() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00313">linear_set.h:313</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_aa5b4815221a5b6a6d876629884b7535d"><div class="ttname"><a href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">ext::linear_set&lt; Attribute, AttributeKey &gt;::value_type</a></div><div class="ttdeci">Attribute value_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00107">linear_set.h:107</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a2128280c348a735ceb63d37af7ee698b"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a2128280c348a735ceb63d37af7ee698b">ext::linear_set&lt; Attribute, AttributeKey &gt;::const_pointer</a></div><div class="ttdeci">typename container_type::const_pointer const_pointer</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00116">linear_set.h:116</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_abacf20e6be51e53d92ac985ca1b305cf"><div class="ttname"><a href="classext_1_1linear__set.xhtml#abacf20e6be51e53d92ac985ca1b305cf">ext::linear_set::swap</a></div><div class="ttdeci">void swap(linear_set &amp;other) noexcept</div><div class="ttdoc">Swaps data with another linear set. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00261">linear_set.h:261</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a1a08e9373da1ab3b63d05ddc0e75381b"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a1a08e9373da1ab3b63d05ddc0e75381b">ext::linear_set::erase</a></div><div class="ttdeci">size_type erase(const key_type &amp;key)</div><div class="ttdoc">Erases the entry with a key. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00250">linear_set.h:250</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_aba3e3a6085b29b9ed94956d07abd19fd"><div class="ttname"><a href="classext_1_1linear__set.xhtml#aba3e3a6085b29b9ed94956d07abd19fd">ext::linear_set::data</a></div><div class="ttdeci">container_type &amp; data()</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00283">linear_set.h:283</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a2a392ab7d8e3d5918c4923e380f3ba83"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a2a392ab7d8e3d5918c4923e380f3ba83">ext::linear_set::linear_set</a></div><div class="ttdeci">linear_set(Iterator first1, Iterator last1)</div><div class="ttdoc">Standard constructors (copy and move are implicit). </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00136">linear_set.h:136</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a5d6cd826ff28591b8c2dcd68f0f52e81"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a5d6cd826ff28591b8c2dcd68f0f52e81">ext::linear_set::begin</a></div><div class="ttdeci">iterator begin()</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00288">linear_set.h:288</a></div></div>
<div class="ttc" id="structext_1_1identity_xhtml"><div class="ttname"><a href="structext_1_1identity.xhtml">ext::identity</a></div><div class="ttdoc">Identity functor. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00031">linear_set.h:31</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ac8d877fc359c39df4aecfca7163760ed"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">ext::linear_set&lt; Attribute, AttributeKey &gt;::container_type</a></div><div class="ttdeci">std::vector&lt; value_type &gt; container_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00110">linear_set.h:110</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a86ba95868c4f09075b20e5fb76b3d712"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">ext::linear_set&lt; Attribute, AttributeKey &gt;::reverse_iterator</a></div><div class="ttdeci">typename container_type::reverse_iterator reverse_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00121">linear_set.h:121</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_acc9acd3ca6dc763bca877bcbd1116089"><div class="ttname"><a href="classext_1_1linear__set.xhtml#acc9acd3ca6dc763bca877bcbd1116089">ext::linear_set::rend</a></div><div class="ttdeci">reverse_iterator rend()</div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00310">linear_set.h:310</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a69ed39f3d7df4fd4dd53a05f6a600f63"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">ext::linear_set::find</a></div><div class="ttdeci">const_iterator find(const key_type &amp;key) const </div><div class="ttdoc">Finds an entry in the set by key. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00151">linear_set.h:151</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ab2eac7920acba8cbe6cf2018306ece46"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ab2eac7920acba8cbe6cf2018306ece46">ext::linear_set::swap</a></div><div class="ttdeci">friend void swap(linear_set &amp;lhs, linear_set &amp;rhs) noexcept</div><div class="ttdoc">Friend swap definition for convenience sake. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00101">linear_set.h:101</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml"><div class="ttname"><a href="classext_1_1linear__set.xhtml">ext::linear_set</a></div><div class="ttdoc">An adaptor set with lookup complexity O(N) based on sequence (contiguous structure by default)...</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00076">linear_set.h:76</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a26c93cc15ad980e7e277d729b9f76d4e"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">ext::linear_set&lt; Attribute, AttributeKey &gt;::size_type</a></div><div class="ttdeci">typename container_type::size_type size_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00124">linear_set.h:124</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a40e8ce077a71da6af38035d0bd0da909"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a40e8ce077a71da6af38035d0bd0da909">ext::linear_set&lt; Attribute, AttributeKey &gt;::const_reference</a></div><div class="ttdeci">typename container_type::const_reference const_reference</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00118">linear_set.h:118</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a1ec6c7d6bef546a38df9475bc24d02c7"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a1ec6c7d6bef546a38df9475bc24d02c7">ext::linear_set::rbegin</a></div><div class="ttdeci">reverse_iterator rbegin()</div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00309">linear_set.h:309</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a085cc1d33bddedf017a936b066e232d0"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a085cc1d33bddedf017a936b066e232d0">ext::linear_set::erase</a></div><div class="ttdeci">iterator erase(iterator pos)</div><div class="ttdoc">Erases the entry pointed by an iterator. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00241">linear_set.h:241</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a34403cb0a669f165c50673b98a610d2d"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a34403cb0a669f165c50673b98a610d2d">ext::linear_set::clear</a></div><div class="ttdeci">void clear() noexcept</div><div class="ttdoc">Erases all entries in the set. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00270">linear_set.h:270</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ad3446ce7b3f8775497a4e1d28103ec89"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ad3446ce7b3f8775497a4e1d28103ec89">ext::linear_set::end</a></div><div class="ttdeci">const_iterator end() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00303">linear_set.h:303</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a6d746768a670c3056e89f098e75ebb02"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a6d746768a670c3056e89f098e75ebb02">ext::linear_set::begin</a></div><div class="ttdeci">const_iterator begin() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00296">linear_set.h:296</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ae47e07887da12c58b88dedfad119cc60"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ae47e07887da12c58b88dedfad119cc60">ext::linear_set&lt; Attribute, AttributeKey &gt;::difference_type</a></div><div class="ttdeci">typename container_type::difference_type difference_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00125">linear_set.h:125</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a4802c2d5b142b5badc347ae6f4ac0025"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">ext::linear_set::insert</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; insert(const value_type &amp;value)</div><div class="ttdoc">Inserts a value into the set if the equal value is not in the set. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00185">linear_set.h:185</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ad5ff6a309c8291909fd38cb55c338e8e"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ad5ff6a309c8291909fd38cb55c338e8e">ext::linear_set::rend</a></div><div class="ttdeci">const_reverse_iterator rend() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00314">linear_set.h:314</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_af35d5d142b4f59aff56a3bac69d1ce1a"><div class="ttname"><a href="classext_1_1linear__set.xhtml#af35d5d142b4f59aff56a3bac69d1ce1a">ext::linear_set::capacity</a></div><div class="ttdeci">size_type capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00278">linear_set.h:278</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_abad7da128c7a2b33787f4688ddc93ef5"><div class="ttname"><a href="classext_1_1linear__set.xhtml#abad7da128c7a2b33787f4688ddc93ef5">ext::linear_set::insert</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; insert(value_type &amp;&amp;value)</div><div class="ttdoc">Inserts a value into the set if the equal value is not in the set. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00193">linear_set.h:193</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a0b995091d228291150ef7410f7c4af36"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a0b995091d228291150ef7410f7c4af36">ext::linear_set::cend</a></div><div class="ttdeci">const_iterator cend() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00302">linear_set.h:302</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_af4e6760e6b3b86703b5ff659d55d8f98"><div class="ttname"><a href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">ext::linear_set&lt; Attribute, AttributeKey &gt;::const_iterator</a></div><div class="ttdeci">typename container_type::const_iterator const_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00120">linear_set.h:120</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ab3e852c12ea7751ce992f5c814fb49fb"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ab3e852c12ea7751ce992f5c814fb49fb">ext::linear_set::reserve</a></div><div class="ttdeci">void reserve(size_type n)</div><div class="ttdoc">Prepares the linear set for a specified number of entries. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00275">linear_set.h:275</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ac75cad225076e020d763915848242ec8"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ac75cad225076e020d763915848242ec8">ext::linear_set::emplace</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; emplace(Ts &amp;&amp;...args)</div><div class="ttdoc">Attempts to build and insert an entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00224">linear_set.h:224</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_ae06fae52a107a86748b4f42ba5228731"><div class="ttname"><a href="classext_1_1linear__set.xhtml#ae06fae52a107a86748b4f42ba5228731">ext::linear_set::insert</a></div><div class="ttdeci">void insert(Iterator first1, Iterator last1)</div><div class="ttdoc">Inserts a range of elements. </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00210">linear_set.h:210</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a2550e4e69cdfa2421e3a9158a67a378a"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">ext::linear_set&lt; Attribute, AttributeKey &gt;::const_reverse_iterator</a></div><div class="ttdeci">typename container_type::const_reverse_iterator const_reverse_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00123">linear_set.h:123</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml_a6ab625e16e71548d77393733086cfa0a"><div class="ttname"><a href="classext_1_1linear__set.xhtml#a6ab625e16e71548d77393733086cfa0a">ext::linear_set::linear_set</a></div><div class="ttdeci">linear_set(std::initializer_list&lt; value_type &gt; init_list)</div><div class="ttdoc">Standard constructors (copy and move are implicit). </div><div class="ttdef"><b>Definition:</b> <a href="linear__set_8h_source.xhtml#l00131">linear_set.h:131</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Feb 19 2018 00:21:32 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
