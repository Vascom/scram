<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of fault tree and component containers.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree_8h.xhtml">fault_tree.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">   27</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">Component::Component</a>(std::string name, std::string base_path,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                     <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::move(name)), <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(role, std::move(base_path)) {}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a4fd4a9b195b92c8061149da20f5bd3f0">   31</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a0850b39d32c65b07887787383168de63">ccf_groups</a>().count(ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>())) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateElementError.xhtml">DuplicateElementError</a>())</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        &lt;&lt; <a class="code" href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">errinfo_element</a>(ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>(), <span class="stringliteral">&quot;CCF group&quot;</span>);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member : ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">members</a>())</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    CheckDuplicateEvent(*member);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>* member : ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">members</a>())</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Composite::Add(member);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  Composite::Add(ccf_group);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">   45</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(std::unordered_set&lt;Gate*&gt;* <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a35a4bac8e19804608ed9ce8ae6d37db6">gates</a>) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  gates-&gt;insert(data&lt;Gate&gt;().<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), data&lt;Gate&gt;().<a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>&amp; component : table&lt;Component&gt;())</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    component.GatherGates(gates);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">void</span> Component::CheckDuplicateEvent(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Event.xhtml">Event</a>&amp; event) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = <span class="keyword">event</span>.name();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a35a4bac8e19804608ed9ce8ae6d37db6">gates</a>().count(name) || <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a04e1c221d74d7a4415520a27b55eea0d">basic_events</a>().count(name) ||</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Component.xhtml#aef26693155672c7bbca3eba983367d58">house_events</a>().count(name)) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateElementError.xhtml">DuplicateElementError</a>())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        &lt;&lt; <a class="code" href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">errinfo_element</a>(name, <span class="stringliteral">&quot;event&quot;</span>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        &lt;&lt; <a class="code" href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">errinfo_container</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>(), <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a5ed553a1c9355b57af2cb1f610f5a92e">kTypeString</a>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">   61</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">FaultTree::FaultTree</a>(<span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>) : <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>(name) {}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">   63</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">FaultTree::CollectTopEvents</a>() {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  top_events_.clear();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  std::unordered_set&lt;Gate*&gt; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a35a4bac8e19804608ed9ce8ae6d37db6">gates</a>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(&amp;gates);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="comment">// Detects top events.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    MarkNonTopGates(gate, gates);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;mark()) {  <span class="comment">// Not a top event.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      gate-&gt;mark(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);  <span class="comment">// Cleaning up.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      top_events_.push_back(gate);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">void</span> FaultTree::MarkNonTopGates(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a35a4bac8e19804608ed9ce8ae6d37db6">gates</a>) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>())</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">Formula::Arg</a>&amp; arg : gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>().<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#ac850fff7d56305c9cf3a29c5381b502a">args</a>()) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* <span class="keyword">const</span>* arg_gate = std::get_if&lt;Gate*&gt;(&amp;arg.event)) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keywordflow">if</span> (gates.count(*arg_gate)) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        MarkNonTopGates(*arg_gate, gates);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        (*arg_gate)-&gt;mark(NodeMark::kPermanent);  <span class="comment">// Any non clear mark.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00036">fault_tree.h:36</a></div></div>
<div class="ttc" id="error_8h_xhtml_a703fb9ed520e2a4b9ae4076e58ad1b61"><div class="ttname"><a href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">scram::mef::errinfo_element</a></div><div class="ttdeci">boost::tuple&lt; errinfo_element_id, errinfo_element_type &gt; errinfo_element</div><div class="ttdoc">The MEF element identifier data in errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00125">error.h:125</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a29871b1caf2fb961509b42872e6b5213"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">scram::mef::Component::Add</a></div><div class="ttdeci">void Add(Gate *element)</div><div class="ttdoc">Adds MEF constructs into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00089">fault_tree.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml">scram::mef::Event</a></div><div class="ttdoc">Abstract base class for general fault tree events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00039">event.h:39</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Formula_1_1Arg_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Formula_1_1Arg.xhtml">scram::mef::Formula::Arg</a></div><div class="ttdoc">Formula argument with a complement flag. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00232">event.h:232</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml"><div class="ttname"><a href="fault__tree_8h.xhtml">fault_tree.h</a></div><div class="ttdoc">Fault Tree and Component containers. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a35a4bac8e19804608ed9ce8ae6d37db6"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a35a4bac8e19804608ed9ce8ae6d37db6">scram::mef::Component::gates</a></div><div class="ttdeci">auto gates() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00071">fault_tree.h:71</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00079">event.h:79</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a06dd05cabcbeddf42090536f6a47a184"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">scram::mef::CcfGroup::members</a></div><div class="ttdeci">const std::vector&lt; BasicEvent * &gt; &amp; members() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00090">ccf_group.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a63441da08667fe6826f3ae0c0a5a94fe"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">scram::mef::Component::GatherGates</a></div><div class="ttdeci">void GatherGates(std::unordered_set&lt; Gate * &gt; *gates)</div><div class="ttdoc">Recursively traverses components to gather gates relevant to the whole component. ...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00045">fault_tree.cc:45</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00646">element.h:646</a></div></div>
<div class="ttc" id="error_8h_xhtml_a9d59ef4f17bbe2874306a4afb8481175"><div class="ttname"><a href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">scram::mef::errinfo_container</a></div><div class="ttdeci">boost::tuple&lt; errinfo_container_id, errinfo_container_type &gt; errinfo_container</div><div class="ttdoc">The MEF container element as namespace. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00113">error.h:113</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1572ca4bef5e3095daa07536ec422ac7"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">scram::mef::Component::Component</a></div><div class="ttdeci">Component(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs a component assuming that it exists within some fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00027">fault_tree.cc:27</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_a9535bd49edb4598ead887faf8dadd9f2"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">scram::mef::FaultTree::CollectTopEvents</a></div><div class="ttdeci">void CollectTopEvents()</div><div class="ttdoc">Collects top event gates in this fault tree with components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00063">fault_tree.cc:63</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_ab090011090e3250c391886a78fd79720"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">scram::mef::FaultTree::FaultTree</a></div><div class="ttdeci">FaultTree(const std::string &amp;name)</div><div class="ttdoc">The main constructor of the Fault Tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00061">fault_tree.cc:61</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00947">pdag.cc:947</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">scram::mef::NodeMark::kClear</a></div><div class="ttdoc">Implicit conversion to Boolean false. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00640">element.h:640</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a5ed553a1c9355b57af2cb1f610f5a92e"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a5ed553a1c9355b57af2cb1f610f5a92e">scram::mef::Component::kTypeString</a></div><div class="ttdeci">static constexpr const char * kTypeString</div><div class="ttdoc">Type identifier string for error messages. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00047">fault_tree.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a04e1c221d74d7a4415520a27b55eea0d"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a04e1c221d74d7a4415520a27b55eea0d">scram::mef::Component::basic_events</a></div><div class="ttdeci">auto basic_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00072">fault_tree.h:72</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_ac850fff7d56305c9cf3a29c5381b502a"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#ac850fff7d56305c9cf3a29c5381b502a">scram::mef::Formula::args</a></div><div class="ttdeci">const std::vector&lt; Arg &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00320">event.h:320</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00044">error.h:44</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00949">pdag.cc:949</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00159">event.h:159</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00259">element.h:259</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_aef26693155672c7bbca3eba983367d58"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#aef26693155672c7bbca3eba983367d58">scram::mef::Component::house_events</a></div><div class="ttdeci">auto house_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00073">fault_tree.h:73</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00164">element.h:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">The MEF Element with attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00135">element.h:135</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a0850b39d32c65b07887787383168de63"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a0850b39d32c65b07887787383168de63">scram::mef::Component::ccf_groups</a></div><div class="ttdeci">auto ccf_groups() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00075">fault_tree.h:75</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateElementError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateElementError.xhtml">scram::mef::DuplicateElementError</a></div><div class="ttdoc">This error indicates that elements must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00146">error.h:146</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00080">ccf_group.h:80</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00265">element.h:265</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Feb 19 2018 00:21:32 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
