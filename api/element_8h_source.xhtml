<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>element.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">element.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="element_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Base/mixin classes, structs, and properties</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// common to all MEF classes/constructs.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;string_view&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/iterator_facade.hpp&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/hashed_index.hpp&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/mem_fun.hpp&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index_container.hpp&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="linear__set_8h.xhtml">ext/linear_set.h</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="multi__index_8h.xhtml">ext/multi_index.h</a>&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">class </span>Element;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// Elements in MEF containers.</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ContainerElement.xhtml">   49</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ContainerElement.xhtml">ContainerElement</a> {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span>, <span class="keyword">class</span>, <span class="keywordtype">bool</span>, <span class="keywordtype">bool</span>&gt;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Container.xhtml">Container</a>;  <span class="comment">// Only containers manage their elements.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  /// @returns The pointer to the parent container.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  ///          nullptr if no container is provided.</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ContainerElement.xhtml#a6594a0f41cf172ef1ddf4cb25398d485">   56</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>* <a class="code" href="classscram_1_1mef_1_1ContainerElement.xhtml#a6594a0f41cf172ef1ddf4cb25398d485">container</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> container_; }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /// @param[in] element  The element that is the parent container.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  ///                     nullptr if no container.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ContainerElement.xhtml#a6594a0f41cf172ef1ddf4cb25398d485">container</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>* element) { container_ = element; }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// The optional reference to the parent container element</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  /// that this element is a member of.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">  /// @note Attributes are inherited from the parent container.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>* container_ = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/// MEF Element Attributes.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// Attributes carry extra (arbitrary) data for the elements.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// The interpretation of the attribute data</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// is tool-dependent or up-to-the-user.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">/// @note Attribute values are all free-form strings.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">///       The strings are not sanitized or normalized to be meaningful.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">///       If not careful, it is possible to end-up with values</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">///       that XML schema validators won&#39;t accept (e.g., special chars).</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml">   79</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Attribute.xhtml">Attribute</a> {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// @param[in] name  The name for the attribute.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @param[in] value  The value for the attribute.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @param[in] type  The optional type of the attribute value.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// @throws LogicError  if any required values are empty.</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#aacd8dbc862ef1f5426259e2e4e441ee6">   86</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#aacd8dbc862ef1f5426259e2e4e441ee6">Attribute</a>(std::string name, std::string value, std::string type = <span class="stringliteral">&quot;&quot;</span>) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#ac7f1839e267723753611c9ae863da8a0">Attribute::name</a>(std::move(name));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#a258930fb28cfce46186e6ad3c5871165">Attribute::value</a>(std::move(value));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#a303fc887be3b277d74606bddd8251cb1">Attribute::type</a>(std::move(type));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @returns The name of the attribute.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#ac7f1839e267723753611c9ae863da8a0">   93</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#ac7f1839e267723753611c9ae863da8a0">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> name_; }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// @param[in] name  The name for the attribute.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  /// @throws LogicError  The name is empty.</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#a687ad5612f21bf4eb028625291df17ed">   98</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#a687ad5612f21bf4eb028625291df17ed">name</a>(std::string name) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (name.empty())</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Attribute name cannot be empty.&quot;</span>));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    name_ = std::move(name);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// @returns The value of the attribute.</span></div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#a258930fb28cfce46186e6ad3c5871165">  105</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#a258930fb28cfce46186e6ad3c5871165">value</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> value_; }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  /// @param[in] value  The value for the attribute.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// @throws LogicError  The value is empty.</span></div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#af3e35bfe78c0089c5266397f7b48590d">  110</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#af3e35bfe78c0089c5266397f7b48590d">value</a>(std::string value) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (value.empty())</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Attribute value cannot be empty.&quot;</span>));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    value_ = std::move(value);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// @returns The type of the attribute value.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  ///          Empty string if the type is not set.</span></div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#a303fc887be3b277d74606bddd8251cb1">  118</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#a303fc887be3b277d74606bddd8251cb1">type</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> type_; }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// @param[in] type  The value type.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  ///                  Empty string to remove the type.</span></div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Attribute.xhtml#adb0cf48d486cc802b50a74c0db61fbee">  122</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#adb0cf48d486cc802b50a74c0db61fbee">type</a>(std::string type) { type_ = std::move(type); }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  std::string name_;  <span class="comment">///&lt; The name that identifies this attribute.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span>  std::string value_;  <span class="comment">///&lt; Value of this attribute.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>  std::string type_;  <span class="comment">///&lt; Optional type of the attribute.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/// The MEF Element</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/// with attributes and a label.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">/// This is a base/mixin class for most of the MEF constructs.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// @note The class is not polymorphic.</span></div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml">  135</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ContainerElement.xhtml">ContainerElement</a>, <span class="keyword">private</span> boost::noncopyable {<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// Attribute key extractor.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>AttributeKey {<span class="comment"></span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /// Attributes are keyed by their names.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span>    std::string_view operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml">Attribute</a>&amp; attribute)<span class="keyword"> const </span>{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      <span class="keywordflow">return</span> attribute.<a class="code" href="classscram_1_1mef_1_1Attribute.xhtml#ac7f1839e267723753611c9ae863da8a0">name</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  };</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// Unique attribute map keyed with the attribute names.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  /// @note Elements are expected to have very few attributes,</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  ///       complex containers may be overkill.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  /// @note Using a multi-index or other tables incurs</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  ///       a huge memory overhead in common usage (up to 400B / attribute).</span></div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#ab8f1389e2d9004ff0a091cfbf1d902b2">  151</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__set.xhtml">AttributeMap</a> = <a class="code" href="classext_1_1linear__set.xhtml">ext::linear_set&lt;Attribute, AttributeKey&gt;</a>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">  /// Constructs an element with an original name.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">  /// The name is expected to conform to identifier requirements</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  /// described in the MEF documentation and additions.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  /// @param[in] name  The local identifier name.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">  /// @throws LogicError  The name is required and empty.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">  /// @throws ValidityError  The name is malformed.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::string name);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// @returns The original name.</span></div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">  164</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> name_; }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  /// @returns The string view to the name for table keys.</span></div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#a87fe5b9cbfebb09fb47d3fc1221a6f54">  167</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87fe5b9cbfebb09fb47d3fc1221a6f54">name_view</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> name_; }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @returns The empty or preset label.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// @returns Empty string if the label has not been set.</span></div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">  171</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">label</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> label_; }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  /// Sets the element label.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// @param[in] label  The extra description for the element.</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#ad23398a7968d904fada4bc6d266ff464">  176</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#ad23398a7968d904fada4bc6d266ff464">label</a>(std::string label) { label_ = std::move(label); }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// @returns The current set of element attributes (non-inherited!).</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// @note The element attributes override its inherited attributes.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  ///       However, the inherited attributes are not copied into the map.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  ///       The precedence is followed upon lookup.</span></div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#afbb542c215636d65042bfb54a040a356">  183</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__set.xhtml">AttributeMap</a>&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#afbb542c215636d65042bfb54a040a356">attributes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> attributes_; }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  /// Adds an attribute to the attribute map of this element.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">  /// @param[in] attr  An attribute of this element.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// @throws ValidityError  The attribute is duplicate.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  /// @warning Pointers or references</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  ///          to existing attributes may get invalidated.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> AddAttribute(<a class="code" href="classscram_1_1mef_1_1Attribute.xhtml">Attribute</a> attr);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// Sets an attribute to the attribute map.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  /// If an attribute with the same name exits,</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  /// it gets overwritten.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  /// @param[in] attr  An attribute of this element.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">  /// @warning Pointers or references</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">  ///          to existing attributes may get invalidated.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> SetAttribute(<a class="code" href="classscram_1_1mef_1_1Attribute.xhtml">Attribute</a> attr) noexcept;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  /// @param[in] name  The name of the attribute.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// @returns The attribute with the given name.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  ///          nullptr if no attribute is found.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">  /// @warning Attribute addresses are not stable.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  ///          Do not store the returned pointer.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">  /// @note Attributes can be inherited from parent containers.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Attribute.xhtml">Attribute</a>* GetAttribute(std::string_view name) <span class="keyword">const</span> noexcept;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">  /// Removes an attribute of this element.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  /// @param[in] name  The identifying name of the attribute.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  /// @returns The removed attribute if any.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">  /// @post No inherited attributes are affected.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span>  std::optional&lt;Attribute&gt; RemoveAttribute(std::string_view name) noexcept;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// Resets the element name.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  /// @param[in] name  The local identifier name.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  /// @throws LogicError  The name is required and empty.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// @throws ValidityError  The name is malformed.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> name(std::string name);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  std::string name_;  <span class="comment">///&lt; The original name of the element.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span>  std::string label_;  <span class="comment">///&lt; The label text for the element.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  /// Element attributes ordered by insertion time.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">  /// The attributes are unique by their names.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__set.xhtml">AttributeMap</a> attributes_;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;};</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">/// Table of elements with unique names.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">/// @tparam T  Value or (smart/raw) pointer type deriving from Element class.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">/// @pre The element names are not modified</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">///      while it is in the container.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">using</span> <a class="code" href="element_8h.xhtml#ae41d7df4ebf137aeb012b5e286a1c5f7">ElementTable</a> = boost::multi_index_container&lt;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    T, boost::multi_index::indexed_by&lt;boost::multi_index::hashed_unique&lt;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;           boost::multi_index::const_mem_fun&lt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, std::string_view,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                             &amp;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87fe5b9cbfebb09fb47d3fc1221a6f54">Element::name_view</a>&gt;,</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="element_8h.xhtml#ae41d7df4ebf137aeb012b5e286a1c5f7">  256</a></span>&#160;           std::hash&lt;std::string_view&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">/// Role, access attributes for elements.</span></div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">  259</a></span>&#160;<span class="comment"></span><span class="keyword">enum class</span> <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> : std::uint8_t { kPublic, kPrivate };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">/// Mixin class that manages private or public roles</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">/// for elements as needed.</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/// Public is the default assumption.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">/// It is expected to be set only once and never change.</span></div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml">  265</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a> {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// Sets the role of an element upon creation.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">  /// The base reference path must be formatted</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// according to the MEF documentation and additions.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">  /// @param[in] role  A role specifier of the element.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">  /// @param[in] base_path  The series of containers to get this event.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// @throws ValidityError  The base path string is malformed.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// @throws ValidityError  Private element at model/global scope.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(<a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role = RoleSpecifier::kPublic,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                std::string base_path = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  /// @returns The assigned role of the element.</span></div><div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">  280</a></span>&#160;<span class="comment"></span>  <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> <a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kRole_; }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">  /// @returns The base path containing ancestor container names.</span></div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">  283</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kBasePath_; }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keyword">const</span> std::string kBasePath_;  <span class="comment">///&lt; A series of ancestor containers.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> kRole_;  <span class="comment">///&lt; The role of the element.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">/// Computes the full path of an element.</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">/// @tparam T  Element type deriving from Role.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/// @param[in] element  A valid element with a name and base path.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">/// @returns A string representation of the full path.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="element_8h.xhtml#aa0a41336bfd1eb2482e64470eddf3a2c">  301</a></span>&#160;std::string <a class="code" href="element_8h.xhtml#aa0a41336bfd1eb2482e64470eddf3a2c">GetFullPath</a>(<span class="keyword">const</span> T* element) {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">return</span> element-&gt;base_path() + <span class="stringliteral">&quot;.&quot;</span> + element-&gt;name();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">/// Mixin class for assigning unique identifiers to elements.</span></div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml">  306</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a> : <span class="keyword">public</span> Element, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a> {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">  /// @copydoc Element::Element</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">  /// @copydoc Role::Role</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// Mangles the element name into a unique id.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  /// Private elements get their full path as their ids,</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  /// while public elements retain their name as ids.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>(std::string name, std::string base_path = <span class="stringliteral">&quot;&quot;</span>,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;              <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role = RoleSpecifier::kPublic);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">  /// @returns The unique id that is set upon the construction of this element.</span></div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">  318</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">Role::role</a>() == RoleSpecifier::kPublic ? <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>()</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                  : full_path_;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  /// @returns The string view to the id to be used as a table key.</span></div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#aa1008af52ae98e6009b6b36adf4200e9">  324</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1mef_1_1Id.xhtml#aa1008af52ae98e6009b6b36adf4200e9">id_view</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> id(); }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  /// @returns The string view to the unique full path for a table key.</span></div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#afe5c7629191d24b8dd3fa44eaa1a9fd0">  327</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1mef_1_1Id.xhtml#afe5c7629191d24b8dd3fa44eaa1a9fd0">full_path</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> full_path_; }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  /// Resets the element ID.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  /// @param[in] name  The new valid name for the element.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">  /// @pre The element is not in any container keyed by its ID or name.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">  /// @throws LogicError  The name is empty.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">  /// @throws ValidityError  The name is malformed.</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> id(std::string name);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">  /// Produces unique name for the model element within the same type.</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">  341</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">unique_name</a>(<span class="keyword">const</span> Element&amp; element) {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>();</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  }</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#a846997cebdf27bbff872fa87e7f1a9e2">  344</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Id.xhtml#a846997cebdf27bbff872fa87e7f1a9e2">unique_name</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>&amp; element) {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">return</span> element.<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>();</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  std::string full_path_;  <span class="comment">///&lt; Unique for all elements per certain type.</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">/// Table of elements with unique ids.</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">/// @tparam T  Value or (smart/raw) pointer type deriving from Id class.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">/// @pre The element IDs are not modified</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">///      while it is in the container.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">using</span> <a class="code" href="element_8h.xhtml#a8811cc8f3502c598e19570523b16e032">IdTable</a> = boost::multi_index_container&lt;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    T,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    boost::multi_index::indexed_by&lt;boost::multi_index::hashed_unique&lt;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        boost::multi_index::const_mem_fun&lt;Id, std::string_view, &amp;Id::id_view&gt;,</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="element_8h.xhtml#a8811cc8f3502c598e19570523b16e032">  367</a></span>&#160;        std::hash&lt;std::string_view&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">/// Wraps the element container tables into ranges of plain references</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">/// to hide the memory smart or raw pointers.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">/// This is similar to boost::range::adaptors::indirect.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">/// This range is used to enforce const correctness</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">/// by not leaking modifiable elements in the const containers of pointers.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">/// @tparam T  Const or non-const associative container type.</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml">  378</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1TableRange.xhtml">TableRange</a> {<span class="comment"></span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  /// Types inferred from the container.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> deref_type = std::decay_t&lt;decltype(*typename T::value_type(nullptr))&gt;;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="keyword">using</span> key_type = <span class="keyword">typename</span> T::key_type;<span class="comment"></span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">  /// Value typedefs of the range.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a596879f0374ece09ed937c36c7d16313">value_type</a> =</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      std::conditional_t&lt;std::is_const_v&lt;T&gt;, std::add_const_t&lt;deref_type&gt;,</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a596879f0374ece09ed937c36c7d16313">  390</a></span>&#160;                         deref_type&gt;;</div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#af08c3085f796334d30027d01cae89dce">  391</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#af08c3085f796334d30027d01cae89dce">reference</a> = <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a596879f0374ece09ed937c36c7d16313">value_type</a>&amp;;</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#aa45e691045f17f904c8f58fc62144876">  392</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#aa45e691045f17f904c8f58fc62144876">pointer</a> = <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a596879f0374ece09ed937c36c7d16313">value_type</a>*;<span class="comment"></span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  static_assert(std::is_const_v&lt;T&gt; == std::is_const_v&lt;value_type&gt;);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">  /// The proxy forward iterator to extract values instead of pointers.</span></div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">  398</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> : <span class="keyword">public</span> boost::iterator_facade&lt;iterator, value_type,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                                 boost::forward_traversal_tag&gt; {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>boost::iterator_core_access;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">    /// @param[in] it  The iterator of the T container.</span></div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml#a4f5dfb2938b0d122f931a9ad981ab003">  404</a></span>&#160;<span class="comment"></span>    <span class="comment">/*explicit*/</span> <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml#a4f5dfb2938b0d122f931a9ad981ab003">iterator</a>(<span class="keyword">typename</span> T::const_iterator it) : it_(it) {}  <span class="comment">// NOLINT</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">    /// Standard forward iterator functionality.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> increment() { ++it_; }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordtype">bool</span> equal(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a>&amp; other)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> it_ == other.it_; }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#af08c3085f796334d30027d01cae89dce">reference</a> dereference()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> **it_; }<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">typename</span> T::const_iterator it_;  <span class="comment">///&lt; The iterator of value pointers.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a8dd00393145fe0ca26a87f287ca8d2f3">  417</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">const_iterator</a> = <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a>;  <span class="comment">///&lt; Phony const iterator for ranges.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">  /// @param[in] table  The associative container of pointers.</span></div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a161b7b80e7283437612d721a3dbdb6e3">  420</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a161b7b80e7283437612d721a3dbdb6e3">TableRange</a>(T&amp; table) : table_(table) {}</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">  /// The proxy members for the common functionality of the associative table T.</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a39b9756ac09eb5b6f34ca06c2a5b61d4">  424</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a39b9756ac09eb5b6f34ca06c2a5b61d4">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.empty(); }</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a3e7670f96d08e1dd992143ddc7717356">  425</a></span>&#160;  std::size_t <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a3e7670f96d08e1dd992143ddc7717356">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.size(); }</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a8d11644ad7b48c09049ef52de24f7e72">  426</a></span>&#160;  std::size_t <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a8d11644ad7b48c09049ef52de24f7e72">count</a>(<span class="keyword">const</span> key_type&amp; key)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.count(key); }</div><div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a4d832ef0a0d097d392a6c1e16529eb16">  427</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a4d832ef0a0d097d392a6c1e16529eb16">find</a>(<span class="keyword">const</span> key_type&amp; key)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.find(key); }</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a5b13ffcb087c89f72493b990f236402e">  428</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a5b13ffcb087c89f72493b990f236402e">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.begin(); }</div><div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#ae4862504fdbe7c951308b89616396c89">  429</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#ae4862504fdbe7c951308b89616396c89">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.end(); }</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#a5069e3959e6abe1111fd7909800b5f84">  430</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#a5069e3959e6abe1111fd7909800b5f84">cbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.begin(); }</div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TableRange.xhtml#aad25beaf5227df620ee81dd2ad7704e0">  431</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml#aad25beaf5227df620ee81dd2ad7704e0">cend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_.end(); }<span class="comment"></span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  T&amp; table_;  <span class="comment">///&lt; The associative table being wrapped by this range.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">/// The MEF Container of unique elements.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">/// @tparam Self  The deriving MEF container type for the CRTP.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">/// @tparam T  The MEF element type stored in the container.</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">/// @tparam Ownership  True if the container takes ownership over the elements.</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">/// @tparam ById  The indexation strategy (ID or name) to keep elements unique.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class </span>Self, <span class="keyword">class </span>T, <span class="keywordtype">bool</span> Ownership = <span class="keyword">true</span>,</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;          <span class="keywordtype">bool</span> ById = std::is_base_of_v&lt;Id, T&gt;&gt;</div><div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml">  446</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Container.xhtml">Container</a> {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">  /// The MEF Element type.</span></div><div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a43e0e117e16a9dfbe708ddc82257eaa6">  449</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Phase.xhtml">ElementType</a> = T;<span class="comment"></span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">  /// The pointer type (owning or not) to store in the table.</span></div><div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a301ec1ed7b260f1def472a4b79456a51">  451</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a301ec1ed7b260f1def472a4b79456a51">Pointer</a> = std::conditional_t&lt;Ownership, std::unique_ptr&lt;T&gt;, T*&gt;;<span class="comment"></span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">  /// The table indexed by id or name.</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a8e8063ccd7d0197a2a6d0e6130d3f6ac">TableType</a> =</div><div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a8e8063ccd7d0197a2a6d0e6130d3f6ac">  454</a></span>&#160;      std::conditional_t&lt;ById, IdTable&lt;Pointer&gt;, <a class="code" href="element_8h.xhtml#ae41d7df4ebf137aeb012b5e286a1c5f7">ElementTable&lt;Pointer&gt;</a>&gt;;<span class="comment"></span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">  /// The key type of the table.</span></div><div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#aac36a79bb7d56de8d495578d718988c2">  456</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#aac36a79bb7d56de8d495578d718988c2">key_type</a> = <span class="keyword">typename</span> TableType::key_type;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">  /// @returns The table as an associative range of type T elements.</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a3b560ba13e666f706dee9a950ae18a2d">  460</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a3b560ba13e666f706dee9a950ae18a2d">table</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml">TableRange</a>(table_); }</div><div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a1d78c622eb61127d803ecd66e371d879">  461</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a1d78c622eb61127d803ecd66e371d879">table</a>() { <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1TableRange.xhtml">TableRange</a>(table_); }<span class="comment"></span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">  /// Retrieves an element from the container.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">  /// @param[in] id  The valid ID/name string of the element.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">  /// @returns The reference to the element.</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">  /// @throws UndefinedElement  The element is not found.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#acfbeb704d99355151ebff50b29885c46">  472</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> T&amp; <a class="code" href="classscram_1_1mef_1_1Container.xhtml#acfbeb704d99355151ebff50b29885c46">Get</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#aac36a79bb7d56de8d495578d718988c2">key_type</a>&amp; <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">auto</span> it = table_.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">if</span> (it != table_.end())</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;      <span class="keywordflow">return</span> **it;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1UndefinedElement.xhtml">UndefinedElement</a>())</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        &lt;&lt; <a class="code" href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">errinfo_element</a>(std::string(<span class="keywordtype">id</span>), T::kTypeString)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        &lt;&lt; <a class="code" href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">errinfo_container</a>(<a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(static_cast&lt;const Self&amp;&gt;(*<span class="keyword">this</span>)),</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                             Self::kTypeString);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  }</div><div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a605bb6a80f380ebeda6716e92db1dedd">  482</a></span>&#160;  T&amp; <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a605bb6a80f380ebeda6716e92db1dedd">Get</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#aac36a79bb7d56de8d495578d718988c2">key_type</a>&amp; <span class="keywordtype">id</span>) {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(std::as_const(*this).Get(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">  /// Adds a unique element into the container,</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">  /// ensuring no duplicated entries.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">  /// @param[in] element  The pointer to the unique element.</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">  /// @throws DuplicateElementError  The element is already in the container.</span></div><div class="line"><a name="l00493"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a2136972b2c5201110105dfce05cc674e">  493</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a2136972b2c5201110105dfce05cc674e">Add</a>(<a class="code" href="classscram_1_1mef_1_1Container.xhtml#a301ec1ed7b260f1def472a4b79456a51">Pointer</a> element) {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    T&amp; stable_ref = *element;  <span class="comment">// The pointer will be moved later.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">if</span> (table_.insert(std::move(element)).second == <span class="keyword">false</span>) {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateElementError.xhtml">DuplicateElementError</a>())</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;          &lt;&lt; <a class="code" href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">errinfo_element</a>(<a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(stable_ref), T::kTypeString)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;          &lt;&lt; <a class="code" href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">errinfo_container</a>(<a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(static_cast&lt;Self&amp;&gt;(*<span class="keyword">this</span>)),</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                               Self::kTypeString);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    stable_ref.container(static_cast&lt;const Self*&gt;(<span class="keyword">this</span>));</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">  /// Removes MEF elements from the container.</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">  /// @param[in] element  An element defined in this container.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">  /// @returns The removed element.</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">  /// @throws UndefinedElement  The element cannot be found in the container.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">  /// @throws LogicError  The element in the container is not the same object.</span></div><div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a28294d2f7d99945b7c583eebc2e7a620">  512</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a301ec1ed7b260f1def472a4b79456a51">Pointer</a> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a28294d2f7d99945b7c583eebc2e7a620">Remove</a>(T* element) {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keyword">const</span> std::string&amp; key = [element]() -&gt; decltype(<span class="keyword">auto</span>) {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;      <span class="keywordflow">if</span> constexpr (ById) {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keywordflow">return</span> element-&gt;id();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">return</span> element-&gt;name();</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;      }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }();</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">auto</span> it = table_.find(key);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;      <span class="keywordflow">if</span> (it == table_.end())</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1UndefinedElement.xhtml">UndefinedElement</a>());</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;      <span class="keywordflow">if</span> (&amp;**it != element)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Duplicate element with different address.&quot;</span>));</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="classscram_1_1Error.xhtml">Error</a>&amp; err) {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">errinfo_element</a>(<a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(*element), T::kTypeString)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;          &lt;&lt; <a class="code" href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">errinfo_container</a>(<a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(static_cast&lt;const Self&amp;&gt;(*<span class="keyword">this</span>)),</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                               Self::kTypeString);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    element-&gt;container(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">return</span> ext::extract(it, &amp;table_);  <span class="comment">// no-throw.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">  /// @returns The data table with the elements.</span></div><div class="line"><a name="l00541"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Container.xhtml#a50824850770464139d1c34b0b773e42b">  541</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a8e8063ccd7d0197a2a6d0e6130d3f6ac">TableType</a>&amp; <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a50824850770464139d1c34b0b773e42b">data</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table_; }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Container.xhtml#a8e8063ccd7d0197a2a6d0e6130d3f6ac">TableType</a> table_;  <span class="comment">///&lt; Unique table with the elements.</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="keyword">namespace </span>detail {  <span class="comment">// Composite container helper facilities.</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">/// Implementation of container_of to deal w/ empty type list.</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class </span>E, <span class="keyword">class </span>T, <span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">  551</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">container_of_impl</a> {<span class="comment"></span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">  /// The type of the container with elements of type T.</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml#aa57b497ef79c81804acf6b71c6ee5354">type</a> = std::conditional_t&lt;std::is_same_v&lt;E, typename T::ElementType&gt;, T,</div><div class="line"><a name="l00554"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml#aa57b497ef79c81804acf6b71c6ee5354">  554</a></span>&#160;                                  <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">container_of_impl</a>&lt;E, Ts...&gt;<a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml#aa57b497ef79c81804acf6b71c6ee5354">::type</a>&gt;;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;};</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">/// Specialization for an empty type list.</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> E&gt;</div><div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of__impl_3_01E_00_01void_01_4.xhtml">  559</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">container_of_impl</a>&lt;E, void&gt; {</div><div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of__impl_3_01E_00_01void_01_4.xhtml#a76d12d004c0107c3489a62aedbbcc599">  560</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl_3_01E_00_01void_01_4.xhtml#a76d12d004c0107c3489a62aedbbcc599">type</a> = void;  <span class="comment">///&lt; The indicator of not-found.</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">/// Finds the container type for the given element type.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">/// @tparam T  The mef::Element type.</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">/// @tparam Ts  mef::Container types.</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">  568</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">container_of</a> {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  static_assert(std::is_base_of_v&lt;Element, T&gt;);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml#a53518dcb0752c8723e9a7d25d3c18314">  571</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml#a53518dcb0752c8723e9a7d25d3c18314">type</a> = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">container_of_impl</a>&lt;T, Ts..., <span class="keywordtype">void</span>&gt;<a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml#a53518dcb0752c8723e9a7d25d3c18314">::type</a>;  <span class="comment">///&lt; Return.</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  static_assert(!std::is_same_v&lt;type, void&gt;,</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <span class="stringliteral">&quot;No container with elements of type T.&quot;</span>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;};</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">/// The composition of multiple mef::Containers.</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">/// @tparam Ts  Container types.</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml">  583</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Composite.xhtml">Composite</a> : <span class="keyword">public</span> Ts... {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  <span class="keyword">using</span> Ts::Add...;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  <span class="keyword">using</span> Ts::Remove...;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">  /// @tparam T  The mef::Element type in the composite container.</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">  /// @returns The table as an associative range of type T elements.</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml#a9c283de486f5e1035ae3116ae0a3f79c">  593</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1Composite.xhtml#a9c283de486f5e1035ae3116ae0a3f79c">table</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">detail::container_of</a>&lt;T, Ts...&gt;::type;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">return</span> ContainerType::table();</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  }</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00598"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml#adabcab9d787c452f3e6f47587596c1fe">  598</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1Composite.xhtml#adabcab9d787c452f3e6f47587596c1fe">table</a>() {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">detail::container_of</a>&lt;T, Ts...&gt;::type;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">return</span> ContainerType::table();</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">  /// Retrieves an element from the container.</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">  /// @tparam T  The mef::Element type in the composite container.</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">  /// @param[in] id  The valid ID/name string of the element.</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">  /// @returns The reference to the element.</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">  /// @throws UndefinedElement  The element is not found.</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class </span>T,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="keyword">class </span>ContainerType = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">detail::container_of</a>&lt;T, Ts...&gt;::type&gt;</div><div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml#ac4fa8e82b98bf2f40bede1c3d2deb852">  616</a></span>&#160;  <span class="keyword">const</span> T&amp; <a class="code" href="classscram_1_1mef_1_1Composite.xhtml#ac4fa8e82b98bf2f40bede1c3d2deb852">Get</a>(<span class="keyword">const</span> <span class="keyword">typename</span> ContainerType::key_type&amp; <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">return</span> ContainerType::Get(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  }</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class </span>T,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            <span class="keyword">class </span>ContainerType = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">detail::container_of</a>&lt;T, Ts...&gt;::type&gt;</div><div class="line"><a name="l00621"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml#aabcb4244408aa6f68fffcf6bfc07cb8f">  621</a></span>&#160;  T&amp; <a class="code" href="classscram_1_1mef_1_1Composite.xhtml#aabcb4244408aa6f68fffcf6bfc07cb8f">Get</a>(<span class="keyword">const</span> <span class="keyword">typename</span> ContainerType::key_type&amp; <span class="keywordtype">id</span>) {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">return</span> ContainerType::Get(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">  /// @returns The data table with elements of specific type.</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Composite.xhtml#a4705866a3a1c326e171767ab27330128">  629</a></span>&#160;  decltype(<span class="keyword">auto</span>) data()<span class="keyword"> const </span>{</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">detail::container_of</a>&lt;T, Ts...&gt;::type;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span> ContainerType::data();</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;};</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">/// Mixin class for providing marks for graph nodes.</span></div><div class="line"><a name="l00636"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml">  636</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a> {</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">  /// Possible marks for the node.</span></div><div class="line"><a name="l00639"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">  639</a></span>&#160;<span class="comment"></span>  <span class="keyword">enum</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> : std::uint8_t {</div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">  640</a></span>&#160;    kClear = 0,  <span class="comment">///&lt; Implicit conversion to Boolean false.</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment"></span>    kTemporary,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    kPermanent</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  };</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">  /// @returns The mark of this node.</span></div><div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">  646</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> mark_; }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment">  /// Sets the mark for this node.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">  /// @param[in] label  The specific label for the node.</span></div><div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">  651</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">mark</a>(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> label) { mark_ = label; }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;  <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> mark_ = kClear;  <span class="comment">///&lt; The mark for traversal or toposort.</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment">/// Mixin class for providing usage marks for elements.</span></div><div class="line"><a name="l00661"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Usage.xhtml">  661</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">  /// @returns true if the element is used in the model or analysis.</span></div><div class="line"><a name="l00664"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">  664</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> usage_; }</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment">  /// @param[in] usage  The usage state of the element in a model.</span></div><div class="line"><a name="l00667"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Usage.xhtml#aa3f6fa757aead4e37a3c0d82941f0c52">  667</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml#aa3f6fa757aead4e37a3c0d82941f0c52">usage</a>(<span class="keywordtype">bool</span> usage) { usage_ = <a class="code" href="classscram_1_1mef_1_1Usage.xhtml#aa3f6fa757aead4e37a3c0d82941f0c52">usage</a>; }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  <span class="keywordtype">bool</span> usage_ = <span class="keyword">false</span>;  <span class="comment">///&lt; Elements are assumed to be unused at construction.</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_afe5c7629191d24b8dd3fa44eaa1a9fd0"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#afe5c7629191d24b8dd3fa44eaa1a9fd0">scram::mef::Id::full_path</a></div><div class="ttdeci">std::string_view full_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00327">element.h:327</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a7e258c5f6332715d5ed6a3fdbf681a8b"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">scram::mef::Id::id</a></div><div class="ttdeci">const std::string &amp; id() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00318">element.h:318</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a161b7b80e7283437612d721a3dbdb6e3"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a161b7b80e7283437612d721a3dbdb6e3">scram::mef::TableRange::TableRange</a></div><div class="ttdeci">TableRange(T &amp;table)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00420">element.h:420</a></div></div>
<div class="ttc" id="error_8h_xhtml_a703fb9ed520e2a4b9ae4076e58ad1b61"><div class="ttname"><a href="error_8h.xhtml#a703fb9ed520e2a4b9ae4076e58ad1b61">scram::mef::errinfo_element</a></div><div class="ttdeci">boost::tuple&lt; errinfo_element_id, errinfo_element_type &gt; errinfo_element</div><div class="ttdoc">The MEF element identifier data in errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00125">error.h:125</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml">scram::mef::Id</a></div><div class="ttdoc">Mixin class for assigning unique identifiers to elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00306">element.h:306</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a2136972b2c5201110105dfce05cc674e"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a2136972b2c5201110105dfce05cc674e">scram::mef::Container::Add</a></div><div class="ttdeci">void Add(Pointer element)</div><div class="ttdoc">Adds a unique element into the container, ensuring no duplicated entries. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00493">element.h:493</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_aa1008af52ae98e6009b6b36adf4200e9"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#aa1008af52ae98e6009b6b36adf4200e9">scram::mef::Id::id_view</a></div><div class="ttdeci">std::string_view id_view() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00324">element.h:324</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00280">element.h:280</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_af08c3085f796334d30027d01cae89dce"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#af08c3085f796334d30027d01cae89dce">scram::mef::TableRange::reference</a></div><div class="ttdeci">value_type &amp; reference</div><div class="ttdoc">Value typedefs of the range. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00391">element.h:391</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml_aabcb4244408aa6f68fffcf6bfc07cb8f"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml#aabcb4244408aa6f68fffcf6bfc07cb8f">scram::mef::Composite::Get</a></div><div class="ttdeci">T &amp; Get(const typename ContainerType::key_type &amp;id)</div><div class="ttdoc">Retrieves an element from the container. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00621">element.h:621</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_afbb542c215636d65042bfb54a040a356"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#afbb542c215636d65042bfb54a040a356">scram::mef::Element::attributes</a></div><div class="ttdeci">const AttributeMap &amp; attributes() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00183">element.h:183</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ContainerElement_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ContainerElement.xhtml">scram::mef::ContainerElement</a></div><div class="ttdoc">Elements in MEF containers. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00049">element.h:49</a></div></div>
<div class="ttc" id="classscram_1_1Error_xhtml"><div class="ttname"><a href="classscram_1_1Error.xhtml">scram::Error</a></div><div class="ttdoc">The Error class is the base class for all exceptions specific to the SCRAM code. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00062">error.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a5b13ffcb087c89f72493b990f236402e"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a5b13ffcb087c89f72493b990f236402e">scram::mef::TableRange::begin</a></div><div class="ttdeci">iterator begin() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00428">element.h:428</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1detail_1_1container__of_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1detail_1_1container__of.xhtml">scram::mef::detail::container_of</a></div><div class="ttdoc">Finds the container type for the given element type. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00568">element.h:568</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml">scram::mef::Attribute</a></div><div class="ttdoc">MEF Element Attributes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00079">element.h:79</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a3b560ba13e666f706dee9a950ae18a2d"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a3b560ba13e666f706dee9a950ae18a2d">scram::mef::Container::table</a></div><div class="ttdeci">auto table() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00460">element.h:460</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_adb0cf48d486cc802b50a74c0db61fbee"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#adb0cf48d486cc802b50a74c0db61fbee">scram::mef::Attribute::type</a></div><div class="ttdeci">void type(std::string type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00122">element.h:122</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8811cc8f3502c598e19570523b16e032"><div class="ttname"><a href="element_8h.xhtml#a8811cc8f3502c598e19570523b16e032">scram::mef::IdTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Id, std::string_view,&amp;Id::id_view &gt;, std::hash&lt; std::string_view &gt;&gt;&gt;&gt; IdTable</div><div class="ttdoc">Table of elements with unique ids. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00367">element.h:367</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_af3e35bfe78c0089c5266397f7b48590d"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#af3e35bfe78c0089c5266397f7b48590d">scram::mef::Attribute::value</a></div><div class="ttdeci">void value(std::string value)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00110">element.h:110</a></div></div>
<div class="ttc" id="multi__index_8h_xhtml"><div class="ttname"><a href="multi__index_8h.xhtml">multi_index.h</a></div><div class="ttdoc">Helper functions to boost multi_index_container. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_ad92eeb2ebe9c650e3c5ad90526f2d8f9"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">scram::mef::Id::unique_name</a></div><div class="ttdeci">static const std::string &amp; unique_name(const Element &amp;element)</div><div class="ttdoc">Produces unique name for the model element within the same type. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00341">element.h:341</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1detail_1_1container__of_xhtml_a53518dcb0752c8723e9a7d25d3c18314"><div class="ttname"><a href="structscram_1_1mef_1_1detail_1_1container__of.xhtml#a53518dcb0752c8723e9a7d25d3c18314">scram::mef::detail::container_of::type</a></div><div class="ttdeci">typename container_of_impl&lt; T, Ts..., void &gt;::type type</div><div class="ttdoc">Return. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00571">element.h:571</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a846997cebdf27bbff872fa87e7f1a9e2"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a846997cebdf27bbff872fa87e7f1a9e2">scram::mef::Id::unique_name</a></div><div class="ttdeci">static const std::string &amp; unique_name(const Id &amp;element)</div><div class="ttdoc">Produces unique name for the model element within the same type. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00344">element.h:344</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1detail_1_1container__of__impl_3_01E_00_01void_01_4_xhtml_a76d12d004c0107c3489a62aedbbcc599"><div class="ttname"><a href="structscram_1_1mef_1_1detail_1_1container__of__impl_3_01E_00_01void_01_4.xhtml#a76d12d004c0107c3489a62aedbbcc599">scram::mef::detail::container_of_impl&lt; E, void &gt;::type</a></div><div class="ttdeci">void type</div><div class="ttdoc">The indicator of not-found. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00560">element.h:560</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00646">element.h:646</a></div></div>
<div class="ttc" id="error_8h_xhtml_a9d59ef4f17bbe2874306a4afb8481175"><div class="ttname"><a href="error_8h.xhtml#a9d59ef4f17bbe2874306a4afb8481175">scram::mef::errinfo_container</a></div><div class="ttdeci">boost::tuple&lt; errinfo_container_id, errinfo_container_type &gt; errinfo_container</div><div class="ttdoc">The MEF container element as namespace. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00113">error.h:113</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml_ae2ee222f7ce6cd4660567ce97d551222"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">scram::mef::Usage::usage</a></div><div class="ttdeci">bool usage() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00664">element.h:664</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="element_8h_xhtml_aa0a41336bfd1eb2482e64470eddf3a2c"><div class="ttname"><a href="element_8h.xhtml#aa0a41336bfd1eb2482e64470eddf3a2c">scram::mef::GetFullPath</a></div><div class="ttdeci">std::string GetFullPath(const T *element)</div><div class="ttdoc">Computes the full path of an element. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00301">element.h:301</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a605bb6a80f380ebeda6716e92db1dedd"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a605bb6a80f380ebeda6716e92db1dedd">scram::mef::Container::Get</a></div><div class="ttdeci">T &amp; Get(const key_type &amp;id)</div><div class="ttdoc">Retrieves an element from the container. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00482">element.h:482</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a301ec1ed7b260f1def472a4b79456a51"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a301ec1ed7b260f1def472a4b79456a51">scram::mef::Container&lt; Alignment, Phase &gt;::Pointer</a></div><div class="ttdeci">std::conditional_t&lt; true, std::unique_ptr&lt; Phase &gt;, Phase * &gt; Pointer</div><div class="ttdoc">The pointer type (owning or not) to store in the table. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00451">element.h:451</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_aad25beaf5227df620ee81dd2ad7704e0"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#aad25beaf5227df620ee81dd2ad7704e0">scram::mef::TableRange::cend</a></div><div class="ttdeci">iterator cend() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00431">element.h:431</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a8e8063ccd7d0197a2a6d0e6130d3f6ac"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a8e8063ccd7d0197a2a6d0e6130d3f6ac">scram::mef::Container&lt; Alignment, Phase &gt;::TableType</a></div><div class="ttdeci">std::conditional_t&lt; std::is_base_of_v&lt; Id, Phase &gt;, IdTable&lt; Pointer &gt;, ElementTable&lt; Pointer &gt;&gt; TableType</div><div class="ttdoc">The table indexed by id or name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00454">element.h:454</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1detail_1_1container__of__impl_xhtml_aa57b497ef79c81804acf6b71c6ee5354"><div class="ttname"><a href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml#aa57b497ef79c81804acf6b71c6ee5354">scram::mef::detail::container_of_impl::type</a></div><div class="ttdeci">std::conditional_t&lt; std::is_same_v&lt; E, typename T::ElementType &gt;, T, typename container_of_impl&lt; E, Ts... &gt;::type &gt; type</div><div class="ttdoc">The type of the container with elements of type T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00554">element.h:554</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a28294d2f7d99945b7c583eebc2e7a620"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a28294d2f7d99945b7c583eebc2e7a620">scram::mef::Container::Remove</a></div><div class="ttdeci">Pointer Remove(T *element)</div><div class="ttdoc">Removes MEF elements from the container. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00512">element.h:512</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_1_1iterator_xhtml_a4f5dfb2938b0d122f931a9ad981ab003"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml#a4f5dfb2938b0d122f931a9ad981ab003">scram::mef::TableRange::iterator::iterator</a></div><div class="ttdeci">iterator(typename T::const_iterator it)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00404">element.h:404</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml_ac4fa8e82b98bf2f40bede1c3d2deb852"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml#ac4fa8e82b98bf2f40bede1c3d2deb852">scram::mef::Composite::Get</a></div><div class="ttdeci">const T &amp; Get(const typename ContainerType::key_type &amp;id) const </div><div class="ttdoc">Retrieves an element from the container. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00616">element.h:616</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Phase_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Phase.xhtml">scram::mef::Phase</a></div><div class="ttdoc">Phases of alignments the models spends its time fraction. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8h_source.xhtml#l00032">alignment.h:32</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ContainerElement_xhtml_a6594a0f41cf172ef1ddf4cb25398d485"><div class="ttname"><a href="classscram_1_1mef_1_1ContainerElement.xhtml#a6594a0f41cf172ef1ddf4cb25398d485">scram::mef::ContainerElement::container</a></div><div class="ttdeci">const Element * container() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00056">element.h:56</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_aac36a79bb7d56de8d495578d718988c2"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#aac36a79bb7d56de8d495578d718988c2">scram::mef::Container&lt; Alignment, Phase &gt;::key_type</a></div><div class="ttdeci">typename TableType::key_type key_type</div><div class="ttdoc">The key type of the table. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00456">element.h:456</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a87fe5b9cbfebb09fb47d3fc1221a6f54"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a87fe5b9cbfebb09fb47d3fc1221a6f54">scram::mef::Element::name_view</a></div><div class="ttdeci">std::string_view name_view() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00167">element.h:167</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1detail_1_1container__of__impl_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1detail_1_1container__of__impl.xhtml">scram::mef::detail::container_of_impl</a></div><div class="ttdoc">Implementation of container_of to deal w/ empty type list. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00551">element.h:551</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml">scram::mef::Container</a></div><div class="ttdoc">The MEF Container of unique elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00446">element.h:446</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_aa1c785eded54130822f51867255a0911"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">scram::mef::NodeMark::mark</a></div><div class="ttdeci">void mark(Mark label)</div><div class="ttdoc">Sets the mark for this node. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00651">element.h:651</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_aacd8dbc862ef1f5426259e2e4e441ee6"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#aacd8dbc862ef1f5426259e2e4e441ee6">scram::mef::Attribute::Attribute</a></div><div class="ttdeci">Attribute(std::string name, std::string value, std::string type=&quot;&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00086">element.h:86</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_a258930fb28cfce46186e6ad3c5871165"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#a258930fb28cfce46186e6ad3c5871165">scram::mef::Attribute::value</a></div><div class="ttdeci">const std::string &amp; value() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00105">element.h:105</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml">scram::mef::TableRange</a></div><div class="ttdoc">Wraps the element container tables into ranges of plain references to hide the memory smart or raw po...</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00378">element.h:378</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a8d11644ad7b48c09049ef52de24f7e72"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a8d11644ad7b48c09049ef52de24f7e72">scram::mef::TableRange::count</a></div><div class="ttdeci">std::size_t count(const key_type &amp;key) const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00426">element.h:426</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml_adabcab9d787c452f3e6f47587596c1fe"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml#adabcab9d787c452f3e6f47587596c1fe">scram::mef::Composite::table</a></div><div class="ttdeci">auto table()</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00598">element.h:598</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00044">error.h:44</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a1d78c622eb61127d803ecd66e371d879"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a1d78c622eb61127d803ecd66e371d879">scram::mef::Container::table</a></div><div class="ttdeci">auto table()</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00461">element.h:461</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a5069e3959e6abe1111fd7909800b5f84"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a5069e3959e6abe1111fd7909800b5f84">scram::mef::TableRange::cbegin</a></div><div class="ttdeci">iterator cbegin() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00430">element.h:430</a></div></div>
<div class="ttc" id="element_8h_xhtml_ae41d7df4ebf137aeb012b5e286a1c5f7"><div class="ttname"><a href="element_8h.xhtml#ae41d7df4ebf137aeb012b5e286a1c5f7">scram::mef::ElementTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Element, std::string_view,&amp;Element::name_view &gt;, std::hash&lt; std::string_view &gt;&gt;&gt;&gt; ElementTable</div><div class="ttdoc">Table of elements with unique names. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00256">element.h:256</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a87e90b86d7599c2f60d7a7b99ab52d20"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">scram::mef::Element::label</a></div><div class="ttdeci">const std::string &amp; label() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00171">element.h:171</a></div></div>
<div class="ttc" id="classext_1_1linear__set_xhtml"><div class="ttname"><a href="classext_1_1linear__set.xhtml">ext::linear_set&lt; Attribute, AttributeKey &gt;</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_a687ad5612f21bf4eb028625291df17ed"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#a687ad5612f21bf4eb028625291df17ed">scram::mef::Attribute::name</a></div><div class="ttdeci">void name(std::string name)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00098">element.h:98</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00661">element.h:661</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00259">element.h:259</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a39b9756ac09eb5b6f34ca06c2a5b61d4"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a39b9756ac09eb5b6f34ca06c2a5b61d4">scram::mef::TableRange::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00424">element.h:424</a></div></div>
<div class="ttc" id="linear__set_8h_xhtml"><div class="ttname"><a href="linear__set_8h.xhtml">linear_set.h</a></div><div class="ttdoc">Implementation of a vector-based set for a small number of entries. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_a50824850770464139d1c34b0b773e42b"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#a50824850770464139d1c34b0b773e42b">scram::mef::Container::data</a></div><div class="ttdeci">const TableType &amp; data() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00541">element.h:541</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Container_xhtml_acfbeb704d99355151ebff50b29885c46"><div class="ttname"><a href="classscram_1_1mef_1_1Container.xhtml#acfbeb704d99355151ebff50b29885c46">scram::mef::Container::Get</a></div><div class="ttdeci">const T &amp; Get(const key_type &amp;id) const </div><div class="ttdoc">Retrieves an element from the container. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00472">element.h:472</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00164">element.h:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">The MEF Element with attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00135">element.h:135</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_ae4862504fdbe7c951308b89616396c89"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#ae4862504fdbe7c951308b89616396c89">scram::mef::TableRange::end</a></div><div class="ttdeci">iterator end() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00429">element.h:429</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_aa45e691045f17f904c8f58fc62144876"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#aa45e691045f17f904c8f58fc62144876">scram::mef::TableRange::pointer</a></div><div class="ttdeci">value_type * pointer</div><div class="ttdoc">Value typedefs of the range. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00392">element.h:392</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_ad23398a7968d904fada4bc6d266ff464"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#ad23398a7968d904fada4bc6d266ff464">scram::mef::Element::label</a></div><div class="ttdeci">void label(std::string label)</div><div class="ttdoc">Sets the element label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00176">element.h:176</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_a303fc887be3b277d74606bddd8251cb1"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#a303fc887be3b277d74606bddd8251cb1">scram::mef::Attribute::type</a></div><div class="ttdeci">const std::string &amp; type() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00118">element.h:118</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a3e7670f96d08e1dd992143ddc7717356"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a3e7670f96d08e1dd992143ddc7717356">scram::mef::TableRange::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00425">element.h:425</a></div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00089">error.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_1_1iterator_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange_1_1iterator.xhtml">scram::mef::TableRange::iterator</a></div><div class="ttdoc">The proxy forward iterator to extract values instead of pointers. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00398">element.h:398</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">scram::mef::NodeMark::Mark</a></div><div class="ttdeci">Mark</div><div class="ttdoc">Possible marks for the node. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00639">element.h:639</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a596879f0374ece09ed937c36c7d16313"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a596879f0374ece09ed937c36c7d16313">scram::mef::TableRange::value_type</a></div><div class="ttdeci">std::conditional_t&lt; std::is_const_v&lt; T &gt;, std::add_const_t&lt; deref_type &gt;, deref_type &gt; value_type</div><div class="ttdoc">Value typedefs of the range. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00390">element.h:390</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml_aa3f6fa757aead4e37a3c0d82941f0c52"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml#aa3f6fa757aead4e37a3c0d82941f0c52">scram::mef::Usage::usage</a></div><div class="ttdeci">void usage(bool usage)</div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00667">element.h:667</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml_a9c283de486f5e1035ae3116ae0a3f79c"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml#a9c283de486f5e1035ae3116ae0a3f79c">scram::mef::Composite::table</a></div><div class="ttdeci">auto table() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00593">element.h:593</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Attribute_xhtml_ac7f1839e267723753611c9ae863da8a0"><div class="ttname"><a href="classscram_1_1mef_1_1Attribute.xhtml#ac7f1839e267723753611c9ae863da8a0">scram::mef::Attribute::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00093">element.h:93</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateElementError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateElementError.xhtml">scram::mef::DuplicateElementError</a></div><div class="ttdoc">This error indicates that elements must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00146">error.h:146</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml">scram::mef::Composite</a></div><div class="ttdoc">The composition of multiple mef::Containers. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00583">element.h:583</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TableRange_xhtml_a4d832ef0a0d097d392a6c1e16529eb16"><div class="ttname"><a href="classscram_1_1mef_1_1TableRange.xhtml#a4d832ef0a0d097d392a6c1e16529eb16">scram::mef::TableRange::find</a></div><div class="ttdeci">iterator find(const key_type &amp;key) const </div><div class="ttdoc">The proxy members for the common functionality of the associative table T. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00427">element.h:427</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00283">element.h:283</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00265">element.h:265</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1UndefinedElement_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1UndefinedElement.xhtml">scram::mef::UndefinedElement</a></div><div class="ttdoc">The error for undefined elements in a model. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00151">error.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00636">element.h:636</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Feb 19 2018 00:21:32 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
