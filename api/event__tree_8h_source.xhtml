<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event_tree.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event_tree.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event__tree_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Event Tree facilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;variant&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="variant_8h.xhtml">ext/variant.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="instruction_8h.xhtml">instruction.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// Representation of sequences in event trees.</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml">   35</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  /// Type string for error messages.</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">   38</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">kTypeString</a> = <span class="stringliteral">&quot;sequence&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  /// @param[in] instructions  Zero or more instructions for the sequence.</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">   43</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>(std::vector&lt;Instruction*&gt; <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">instructions</a>) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">  /// @returns The instructions to be applied at this sequence.</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">   48</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  /// Instructions to execute with the sequence.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span>  std::vector&lt;Instruction*&gt; instructions_;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>;  <span class="comment">// Manages the order assignment to functional events.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">/// Representation of functional events in event trees.</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">   60</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// Type string for error messages.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a17bfd6b3ef3912a9a37675426f478fa2">   63</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">kTypeString</a> = <span class="stringliteral">&quot;functional event&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// @returns The order of the functional event in the event tree.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// @returns 0 if no order has been assigned.</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">   69</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">order</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> order_; }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  /// Sets the functional event order.</span></div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a2c1afa64161912a8f89303f1a66b7402">   72</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a2c1afa64161912a8f89303f1a66b7402">order</a>(<span class="keywordtype">int</span> order) { order_ = <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a2c1afa64161912a8f89303f1a66b7402">order</a>; }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordtype">int</span> order_ = 0;  <span class="comment">///&lt; The order of the functional event.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">/// The branch representation in event trees.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml">   82</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// The types of possible branch end-points.</span></div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">   85</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">Target</a> = std::variant&lt;Sequence*, Fork*, NamedBranch*&gt;;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// Sets the instructions to execute at the branch.</span></div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">   88</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>(std::vector&lt;Instruction*&gt; <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">instructions</a>) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @returns The instructions to execute at the branch.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">   93</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  /// Sets the target for the branch.</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">   98</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">Target</a> target) { target_ = std::move(target); }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// @returns The target semantics or end-points of the branch.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// @pre The target has been set.</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">  103</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">Target</a>&amp; <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">target</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    assert(ext::as&lt;bool&gt;(target_));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> target_;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Zero or more instructions.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">Target</a> target_;  <span class="comment">///&lt; The target semantics of the branch.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/// Named branches that can be referenced and reused.</span></div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NamedBranch.xhtml">  114</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NamedBranch.xhtml#aae4949f729bc718e87386c2a958619ec">  119</a></span>&#160;  <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">kTypeString</a> = <span class="stringliteral">&quot;branch&quot;</span>;  <span class="comment">///&lt; For error message.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;};</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">/// Functional-event state paths in event trees.</span></div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Path.xhtml">  125</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @param[in] state  State identifier string for functional event.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// @throws LogicError  The string is empty or malformed.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>(std::string state);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// @returns The state of a functional event.</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">  133</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> state_; }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  std::string state_;  <span class="comment">///&lt; The state identifier.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">/// Functional event forks.</span></div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml">  140</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a> {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  /// @param[in] functional_event  The source functional event.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  /// @param[in] paths  The fork paths with functional event states.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// @throws ValidityError  The path states are duplicated.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event, std::vector&lt;Path&gt; paths);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  /// @returns The functional event of the fork.</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">  149</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> functional_event_; }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">  /// @returns The fork paths with functional event states.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">  153</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Path&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> paths_; }</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">  154</a></span>&#160;  std::vector&lt;Path&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">paths</a>() { <span class="keywordflow">return</span> paths_; }<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event_;  <span class="comment">///&lt; The fork source.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span>  std::vector&lt;Path&gt; paths_;  <span class="comment">///&lt; The non-empty collection of fork paths.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">/// Event Tree representation with MEF constructs.</span></div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml">  163</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                  <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a>,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                  <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Composite.xhtml">Composite</a>&lt;Container&lt;EventTree, Sequence, false&gt;,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                   Container&lt;EventTree, FunctionalEvent&gt;,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                   Container&lt;EventTree, NamedBranch&gt;&gt; {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// Container and element type string for error messages.</span></div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a86dc13606784c5a6688a2204bf19fa6e">  170</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">kTypeString</a> = <span class="stringliteral">&quot;event tree&quot;</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// @returns The initial state branch of the event tree.</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">  175</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> initial_state_; }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// Sets the initial state of the event tree.</span></div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">  178</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">initial_state</a>(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> branch) { initial_state_ = std::move(branch); }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// @returns The table range of event tree elements of specific kind</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  ///          with element original names as keys.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a0a95e10868b8345625aae553efe0914a">  183</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a0a95e10868b8345625aae553efe0914a">sequances</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table&lt;Sequence&gt;(); }</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#abb840015353ee91a944c77ef51003784">  184</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#abb840015353ee91a944c77ef51003784">functional_events</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table&lt;FunctionalEvent&gt;(); }</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a4b0898b4fc6de13733671a6320e84bf5">  185</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a4b0898b4fc6de13733671a6320e84bf5">branches</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> table&lt;NamedBranch&gt;(); }<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keyword">using</span> Composite::Add;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keyword">using</span> Composite::Remove;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  /// Registers an event tree fork.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// @param[in] fork  The fork in this event tree.</span></div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a4e4632aaa630ad2a69770f9ac076ad97">  194</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a4e4632aaa630ad2a69770f9ac076ad97">Add</a>(std::unique_ptr&lt;Fork&gt; fork) { forks_.push_back(std::move(fork)); }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> initial_state_;  <span class="comment">///&lt; The starting point.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span>  std::vector&lt;std::unique_ptr&lt;Fork&gt;&gt; forks_;  <span class="comment">///&lt; Lifetime management of forks.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">/// Event-tree Initiating Event.</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">  202</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">InitiatingEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">  /// Type string for error messages.</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a7c45a6fb0594a7deb526c63c560d1dbb">  205</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">kTypeString</a> = <span class="stringliteral">&quot;initiating event&quot;</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// Associates an event tree to the initiating event.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  /// @param[in] event_tree  Fully initialized event tree container.</span></div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">  212</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">event_tree</a>(<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    assert(!event_tree_ &amp;&amp; event_tree &amp;&amp; <span class="stringliteral">&quot;Resetting or un-setting event tree.&quot;</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    event_tree_ = event_tree;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// @returns The event tree of the initiating event.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  ///          nullptr if the event tree is not set.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">  220</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">event_tree</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> event_tree_; }</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">  221</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">event_tree</a>() { <span class="keywordflow">return</span> event_tree_; }<span class="comment"></span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree_ = <span class="keyword">nullptr</span>;  <span class="comment">///&lt; The optional event tree specification.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_a3e12c3ef25c1d9f85b68cc67fb592d6c"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">EventTree * event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00220">event_tree.h:220</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a006e56dfae6a5a3bb91f1a4644ed59fa"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">scram::mef::Element::Element</a></div><div class="ttdeci">Element(std::string name)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00025">element.cc:25</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_abb840015353ee91a944c77ef51003784"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#abb840015353ee91a944c77ef51003784">scram::mef::EventTree::functional_events</a></div><div class="ttdeci">auto functional_events() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00184">event_tree.h:184</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00175">event_tree.h:175</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a4e4632aaa630ad2a69770f9ac076ad97"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a4e4632aaa630ad2a69770f9ac076ad97">scram::mef::EventTree::Add</a></div><div class="ttdeci">void Add(std::unique_ptr&lt; Fork &gt; fork)</div><div class="ttdoc">Registers an event tree fork. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00194">event_tree.h:194</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml">scram::mef::InitiatingEvent</a></div><div class="ttdoc">Event-tree Initiating Event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00202">event_tree.h:202</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Base/mixin classes, structs, and properties common to all MEF classes/constructs. ...</div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml_a2c1afa64161912a8f89303f1a66b7402"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a2c1afa64161912a8f89303f1a66b7402">scram::mef::FunctionalEvent::order</a></div><div class="ttdeci">void order(int order)</div><div class="ttdoc">Sets the functional event order. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00072">event_tree.h:72</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml_a30eb85c55698bafe4bab0670d019c157"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">scram::mef::FunctionalEvent::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00069">event_tree.h:69</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a4b0898b4fc6de13733671a6320e84bf5"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a4b0898b4fc6de13733671a6320e84bf5">scram::mef::EventTree::branches</a></div><div class="ttdeci">auto branches() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00185">event_tree.h:185</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a673197bb550b4b62db7fae7c8a0bd6dc"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">scram::mef::Fork::functional_event</a></div><div class="ttdeci">const FunctionalEvent &amp; functional_event() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00149">event_tree.h:149</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_aabe81dc526fdae951724e42707c1164f"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">void event_tree(EventTree *event_tree)</div><div class="ttdoc">Associates an event tree to the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00212">event_tree.h:212</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_aa4a5806e0dacb6cda5d81e5c0e6a26c2"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">scram::mef::Sequence::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00048">event_tree.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00043">event_tree.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a4da8cf589eb0aa47910aecfdedbdba6c"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">scram::mef::Branch::target</a></div><div class="ttdeci">const Target &amp; target() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00103">event_tree.h:103</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml">scram::mef::FunctionalEvent</a></div><div class="ttdoc">Representation of functional events in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00060">event_tree.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_ac3ed6a402b65d84fcc5d0c2ed52e8d05"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">scram::mef::Branch::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdoc">Sets the instructions to execute at the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00088">event_tree.h:88</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00163">event_tree.h:163</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00661">element.h:661</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_ac74c67efc063cf6b3d6b4cfecf84c7d4"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#ac74c67efc063cf6b3d6b4cfecf84c7d4">scram::mef::Sequence::kTypeString</a></div><div class="ttdeci">static constexpr const char * kTypeString</div><div class="ttdoc">Type string for error messages. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00038">event_tree.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml">scram::mef::Path</a></div><div class="ttdoc">Functional-event state paths in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00125">event_tree.h:125</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_aefffbc7850fbfad97b35e866ade81342"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">scram::mef::Fork::paths</a></div><div class="ttdeci">std::vector&lt; Path &gt; &amp; paths()</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00154">event_tree.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_aef3fc76565228977c770034b8b01bc2c"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">scram::mef::Branch::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00093">event_tree.h:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a0a95e10868b8345625aae553efe0914a"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a0a95e10868b8345625aae553efe0914a">scram::mef::EventTree::sequances</a></div><div class="ttdeci">auto sequances() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00183">event_tree.h:183</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">The MEF Element with attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00135">element.h:135</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_a6bdcfc44f13ba954e679bd72694ad22b"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">EventTree * event_tree()</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00221">event_tree.h:221</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a8fafaa6adc152be745b9a767584f13c5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a8fafaa6adc152be745b9a767584f13c5">scram::mef::Branch::Target</a></div><div class="ttdeci">std::variant&lt; Sequence *, Fork *, NamedBranch * &gt; Target</div><div class="ttdoc">The types of possible branch end-points. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00085">event_tree.h:85</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00082">event_tree.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00153">event_tree.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml_a485a6b2f0e1897ed031ad234a18ec233"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">scram::mef::Path::state</a></div><div class="ttdeci">const std::string &amp; state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00133">event_tree.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a39fa946b1c05225c0a05735989403eeb"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">void initial_state(Branch branch)</div><div class="ttdoc">Sets the initial state of the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00178">event_tree.h:178</a></div></div>
<div class="ttc" id="variant_8h_xhtml"><div class="ttname"><a href="variant_8h.xhtml">variant.h</a></div><div class="ttdoc">Extra helper functions for std::variant. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Composite_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Composite.xhtml">scram::mef::Composite</a></div><div class="ttdoc">The composition of multiple mef::Containers. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00583">element.h:583</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00098">event_tree.h:98</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NamedBranch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NamedBranch.xhtml">scram::mef::NamedBranch</a></div><div class="ttdoc">Named branches that can be referenced and reused. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00114">event_tree.h:114</a></div></div>
<div class="ttc" id="instruction_8h_xhtml"><div class="ttname"><a href="instruction_8h.xhtml">instruction.h</a></div><div class="ttdoc">Model and event tree modifier instructions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00140">event_tree.h:140</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00636">element.h:636</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Feb 19 2018 00:21:32 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
