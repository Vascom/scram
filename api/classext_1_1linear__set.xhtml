<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>ext::linear_set&lt; Value, KeyFromValue, Sequence &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>ext</b></li><li class="navelem"><a class="el" href="classext_1_1linear__set.xhtml">linear_set</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classext_1_1linear__set-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ext::linear_set&lt; Value, KeyFromValue, Sequence &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An adaptor set with lookup complexity O(N) based on sequence (contiguous structure by default).  
 <a href="classext_1_1linear__set.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for ext::linear_set&lt; Value, KeyFromValue, Sequence &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:af73748cef52d3584358a22672af895cf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af73748cef52d3584358a22672af895cf"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a> = KeyFromValue</td></tr>
<tr class="memdesc:af73748cef52d3584358a22672af895cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs similar to standard sets. <br /></td></tr>
<tr class="separator:af73748cef52d3584358a22672af895cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5b4815221a5b6a6d876629884b7535d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5b4815221a5b6a6d876629884b7535d"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> = Value</td></tr>
<tr class="memdesc:aa5b4815221a5b6a6d876629884b7535d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs similar to standard sets. <br /></td></tr>
<tr class="separator:aa5b4815221a5b6a6d876629884b7535d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1014e3f486dd597b28aa4ff70822a31e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1014e3f486dd597b28aa4ff70822a31e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> = std::decay_t&lt; decltype(<a class="el" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>()(*static_cast&lt; <a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> * &gt;(nullptr)))&gt;</td></tr>
<tr class="memdesc:a1014e3f486dd597b28aa4ff70822a31e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs similar to standard sets. <br /></td></tr>
<tr class="separator:a1014e3f486dd597b28aa4ff70822a31e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8d877fc359c39df4aecfca7163760ed"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac8d877fc359c39df4aecfca7163760ed"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a> = Sequence&lt; <a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &gt;</td></tr>
<tr class="memdesc:ac8d877fc359c39df4aecfca7163760ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs similar to standard sets. <br /></td></tr>
<tr class="separator:ac8d877fc359c39df4aecfca7163760ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:add164163af1da17817fdeec2db3033ed"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="add164163af1da17817fdeec2db3033ed"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#add164163af1da17817fdeec2db3033ed">pointer</a> = typename container_type::pointer</td></tr>
<tr class="memdesc:add164163af1da17817fdeec2db3033ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:add164163af1da17817fdeec2db3033ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2128280c348a735ceb63d37af7ee698b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2128280c348a735ceb63d37af7ee698b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a2128280c348a735ceb63d37af7ee698b">const_pointer</a> = typename container_type::const_pointer</td></tr>
<tr class="memdesc:a2128280c348a735ceb63d37af7ee698b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a2128280c348a735ceb63d37af7ee698b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5e741e049c0b26d36dcbb0e26597b58"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae5e741e049c0b26d36dcbb0e26597b58"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ae5e741e049c0b26d36dcbb0e26597b58">reference</a> = typename container_type::reference</td></tr>
<tr class="memdesc:ae5e741e049c0b26d36dcbb0e26597b58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:ae5e741e049c0b26d36dcbb0e26597b58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40e8ce077a71da6af38035d0bd0da909"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a40e8ce077a71da6af38035d0bd0da909"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a40e8ce077a71da6af38035d0bd0da909">const_reference</a> = typename container_type::const_reference</td></tr>
<tr class="memdesc:a40e8ce077a71da6af38035d0bd0da909"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a40e8ce077a71da6af38035d0bd0da909"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad95c58e17580f18a7def2122e60c6c21"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad95c58e17580f18a7def2122e60c6c21"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> = typename container_type::iterator</td></tr>
<tr class="memdesc:ad95c58e17580f18a7def2122e60c6c21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:ad95c58e17580f18a7def2122e60c6c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4e6760e6b3b86703b5ff659d55d8f98"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af4e6760e6b3b86703b5ff659d55d8f98"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> = typename container_type::const_iterator</td></tr>
<tr class="memdesc:af4e6760e6b3b86703b5ff659d55d8f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:af4e6760e6b3b86703b5ff659d55d8f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86ba95868c4f09075b20e5fb76b3d712"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a86ba95868c4f09075b20e5fb76b3d712"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a> = typename container_type::reverse_iterator</td></tr>
<tr class="memdesc:a86ba95868c4f09075b20e5fb76b3d712"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a86ba95868c4f09075b20e5fb76b3d712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2550e4e69cdfa2421e3a9158a67a378a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2550e4e69cdfa2421e3a9158a67a378a"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a> = typename container_type::const_reverse_iterator</td></tr>
<tr class="memdesc:a2550e4e69cdfa2421e3a9158a67a378a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a2550e4e69cdfa2421e3a9158a67a378a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26c93cc15ad980e7e277d729b9f76d4e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a26c93cc15ad980e7e277d729b9f76d4e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> = typename container_type::size_type</td></tr>
<tr class="memdesc:a26c93cc15ad980e7e277d729b9f76d4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a26c93cc15ad980e7e277d729b9f76d4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47e07887da12c58b88dedfad119cc60"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae47e07887da12c58b88dedfad119cc60"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ae47e07887da12c58b88dedfad119cc60">difference_type</a> = typename container_type::difference_type</td></tr>
<tr class="memdesc:ae47e07887da12c58b88dedfad119cc60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:ae47e07887da12c58b88dedfad119cc60"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a51ce6ea725aac08f4b15a1741b629bd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a51ce6ea725aac08f4b15a1741b629bd5">key_extractor</a> () const </td></tr>
<tr class="separator:a51ce6ea725aac08f4b15a1741b629bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f3a1810658f8464438f195b876bd9bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a0f3a1810658f8464438f195b876bd9bf">count</a> (const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;key) const </td></tr>
<tr class="memdesc:a0f3a1810658f8464438f195b876bd9bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if an entry in the set.  <a href="#a0f3a1810658f8464438f195b876bd9bf">More...</a><br /></td></tr>
<tr class="separator:a0f3a1810658f8464438f195b876bd9bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae06fae52a107a86748b4f42ba5228731"><td class="memTemplParams" colspan="2">template&lt;typename Iterator &gt; </td></tr>
<tr class="memitem:ae06fae52a107a86748b4f42ba5228731"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ae06fae52a107a86748b4f42ba5228731">insert</a> (Iterator first1, Iterator last1)</td></tr>
<tr class="memdesc:ae06fae52a107a86748b4f42ba5228731"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a range of elements.  <a href="#ae06fae52a107a86748b4f42ba5228731">More...</a><br /></td></tr>
<tr class="separator:ae06fae52a107a86748b4f42ba5228731"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75cad225076e020d763915848242ec8"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:ac75cad225076e020d763915848242ec8"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ac75cad225076e020d763915848242ec8">emplace</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:ac75cad225076e020d763915848242ec8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to build and insert an entry.  <a href="#ac75cad225076e020d763915848242ec8">More...</a><br /></td></tr>
<tr class="separator:ac75cad225076e020d763915848242ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a08e9373da1ab3b63d05ddc0e75381b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a1a08e9373da1ab3b63d05ddc0e75381b">erase</a> (const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:a1a08e9373da1ab3b63d05ddc0e75381b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry with a key.  <a href="#a1a08e9373da1ab3b63d05ddc0e75381b">More...</a><br /></td></tr>
<tr class="separator:a1a08e9373da1ab3b63d05ddc0e75381b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abacf20e6be51e53d92ac985ca1b305cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#abacf20e6be51e53d92ac985ca1b305cf">swap</a> (<a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;other) noexcept</td></tr>
<tr class="memdesc:abacf20e6be51e53d92ac985ca1b305cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps data with another linear set.  <a href="#abacf20e6be51e53d92ac985ca1b305cf">More...</a><br /></td></tr>
<tr class="separator:abacf20e6be51e53d92ac985ca1b305cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16d63e209ee9d60bafb48dbf3c91ca5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a16d63e209ee9d60bafb48dbf3c91ca5a">size</a> () const </td></tr>
<tr class="separator:a16d63e209ee9d60bafb48dbf3c91ca5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55ea71f293335ffde9c4176f56b528f2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a55ea71f293335ffde9c4176f56b528f2">empty</a> () const </td></tr>
<tr class="separator:a55ea71f293335ffde9c4176f56b528f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34403cb0a669f165c50673b98a610d2d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a34403cb0a669f165c50673b98a610d2d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a34403cb0a669f165c50673b98a610d2d">clear</a> () noexcept</td></tr>
<tr class="memdesc:a34403cb0a669f165c50673b98a610d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases all entries in the set. <br /></td></tr>
<tr class="separator:a34403cb0a669f165c50673b98a610d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3e852c12ea7751ce992f5c814fb49fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ab3e852c12ea7751ce992f5c814fb49fb">reserve</a> (<a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> n)</td></tr>
<tr class="memdesc:ab3e852c12ea7751ce992f5c814fb49fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the linear set for a specified number of entries.  <a href="#ab3e852c12ea7751ce992f5c814fb49fb">More...</a><br /></td></tr>
<tr class="separator:ab3e852c12ea7751ce992f5c814fb49fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af35d5d142b4f59aff56a3bac69d1ce1a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#af35d5d142b4f59aff56a3bac69d1ce1a">capacity</a> () const </td></tr>
<tr class="separator:af35d5d142b4f59aff56a3bac69d1ce1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d6cd826ff28591b8c2dcd68f0f52e81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a5d6cd826ff28591b8c2dcd68f0f52e81">begin</a> ()</td></tr>
<tr class="separator:a5d6cd826ff28591b8c2dcd68f0f52e81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a155eaa9a4cd913286959ad03f01e2306"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">end</a> ()</td></tr>
<tr class="separator:a155eaa9a4cd913286959ad03f01e2306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a6ee1022d94d152eeccff1ecda64166cf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6ee1022d94d152eeccff1ecda64166cf"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a6ee1022d94d152eeccff1ecda64166cf">linear_set</a> ()=default</td></tr>
<tr class="memdesc:a6ee1022d94d152eeccff1ecda64166cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors (copy and move are implicit). <br /></td></tr>
<tr class="separator:a6ee1022d94d152eeccff1ecda64166cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab625e16e71548d77393733086cfa0a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6ab625e16e71548d77393733086cfa0a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a6ab625e16e71548d77393733086cfa0a">linear_set</a> (std::initializer_list&lt; <a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &gt; init_list)</td></tr>
<tr class="memdesc:a6ab625e16e71548d77393733086cfa0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors (copy and move are implicit). <br /></td></tr>
<tr class="separator:a6ab625e16e71548d77393733086cfa0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a392ab7d8e3d5918c4923e380f3ba83"><td class="memTemplParams" colspan="2"><a class="anchor" id="a2a392ab7d8e3d5918c4923e380f3ba83"></a>
template&lt;typename Iterator &gt; </td></tr>
<tr class="memitem:a2a392ab7d8e3d5918c4923e380f3ba83"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a2a392ab7d8e3d5918c4923e380f3ba83">linear_set</a> (Iterator first1, Iterator last1)</td></tr>
<tr class="memdesc:a2a392ab7d8e3d5918c4923e380f3ba83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors (copy and move are implicit). <br /></td></tr>
<tr class="separator:a2a392ab7d8e3d5918c4923e380f3ba83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a69ed39f3d7df4fd4dd53a05f6a600f63"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a69ed39f3d7df4fd4dd53a05f6a600f63">find</a> (const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;key) const </td></tr>
<tr class="memdesc:a69ed39f3d7df4fd4dd53a05f6a600f63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an entry in the set by key.  <a href="#a69ed39f3d7df4fd4dd53a05f6a600f63">More...</a><br /></td></tr>
<tr class="separator:a69ed39f3d7df4fd4dd53a05f6a600f63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c2cb408e4023d7c707ada979e9fef3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a79c2cb408e4023d7c707ada979e9fef3">find</a> (const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:a79c2cb408e4023d7c707ada979e9fef3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an entry in the set by key.  <a href="#a79c2cb408e4023d7c707ada979e9fef3">More...</a><br /></td></tr>
<tr class="separator:a79c2cb408e4023d7c707ada979e9fef3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a4802c2d5b142b5badc347ae6f4ac0025"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a4802c2d5b142b5badc347ae6f4ac0025">insert</a> (const <a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &amp;value)</td></tr>
<tr class="memdesc:a4802c2d5b142b5badc347ae6f4ac0025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a value into the set if the equal value is not in the set.  <a href="#a4802c2d5b142b5badc347ae6f4ac0025">More...</a><br /></td></tr>
<tr class="separator:a4802c2d5b142b5badc347ae6f4ac0025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abad7da128c7a2b33787f4688ddc93ef5"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#abad7da128c7a2b33787f4688ddc93ef5">insert</a> (<a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:abad7da128c7a2b33787f4688ddc93ef5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a value into the set if the equal value is not in the set.  <a href="#abad7da128c7a2b33787f4688ddc93ef5">More...</a><br /></td></tr>
<tr class="separator:abad7da128c7a2b33787f4688ddc93ef5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a83e0ac9e967737c9c15ead98e5f460fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a83e0ac9e967737c9c15ead98e5f460fa">erase</a> (<a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> pos)</td></tr>
<tr class="memdesc:a83e0ac9e967737c9c15ead98e5f460fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry pointed by an iterator.  <a href="#a83e0ac9e967737c9c15ead98e5f460fa">More...</a><br /></td></tr>
<tr class="separator:a83e0ac9e967737c9c15ead98e5f460fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a085cc1d33bddedf017a936b066e232d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a085cc1d33bddedf017a936b066e232d0">erase</a> (<a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> pos)</td></tr>
<tr class="memdesc:a085cc1d33bddedf017a936b066e232d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry pointed by an iterator.  <a href="#a085cc1d33bddedf017a936b066e232d0">More...</a><br /></td></tr>
<tr class="separator:a085cc1d33bddedf017a936b066e232d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:aba3e3a6085b29b9ed94956d07abd19fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#aba3e3a6085b29b9ed94956d07abd19fd">data</a> ()</td></tr>
<tr class="separator:aba3e3a6085b29b9ed94956d07abd19fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae9aa2b3ebf2e32189bf0a51a8a4ff11"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#aae9aa2b3ebf2e32189bf0a51a8a4ff11">data</a> () const </td></tr>
<tr class="separator:aae9aa2b3ebf2e32189bf0a51a8a4ff11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a0a3c4b80965c3ad70f6a44371f9fcaa1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a0a3c4b80965c3ad70f6a44371f9fcaa1">cbegin</a> () const </td></tr>
<tr class="separator:a0a3c4b80965c3ad70f6a44371f9fcaa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d746768a670c3056e89f098e75ebb02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a6d746768a670c3056e89f098e75ebb02">begin</a> () const </td></tr>
<tr class="separator:a6d746768a670c3056e89f098e75ebb02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a0b995091d228291150ef7410f7c4af36"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a0b995091d228291150ef7410f7c4af36">cend</a> () const </td></tr>
<tr class="separator:a0b995091d228291150ef7410f7c4af36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3446ce7b3f8775497a4e1d28103ec89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ad3446ce7b3f8775497a4e1d28103ec89">end</a> () const </td></tr>
<tr class="separator:ad3446ce7b3f8775497a4e1d28103ec89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a1ec6c7d6bef546a38df9475bc24d02c7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1ec6c7d6bef546a38df9475bc24d02c7"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a1ec6c7d6bef546a38df9475bc24d02c7">rbegin</a> ()</td></tr>
<tr class="memdesc:a1ec6c7d6bef546a38df9475bc24d02c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a1ec6c7d6bef546a38df9475bc24d02c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc9acd3ca6dc763bca877bcbd1116089"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acc9acd3ca6dc763bca877bcbd1116089"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a86ba95868c4f09075b20e5fb76b3d712">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#acc9acd3ca6dc763bca877bcbd1116089">rend</a> ()</td></tr>
<tr class="memdesc:acc9acd3ca6dc763bca877bcbd1116089"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:acc9acd3ca6dc763bca877bcbd1116089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c1faeb27d9343ef2657ab42811258c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a45c1faeb27d9343ef2657ab42811258c"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a45c1faeb27d9343ef2657ab42811258c">crbegin</a> () const </td></tr>
<tr class="memdesc:a45c1faeb27d9343ef2657ab42811258c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a45c1faeb27d9343ef2657ab42811258c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13135d42b1858d0ac12aaff2165505ed"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a13135d42b1858d0ac12aaff2165505ed"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a13135d42b1858d0ac12aaff2165505ed">rbegin</a> () const </td></tr>
<tr class="memdesc:a13135d42b1858d0ac12aaff2165505ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a13135d42b1858d0ac12aaff2165505ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70058f2004fda0afb6936e1d8c203d76"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a70058f2004fda0afb6936e1d8c203d76"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a70058f2004fda0afb6936e1d8c203d76">crend</a> () const </td></tr>
<tr class="memdesc:a70058f2004fda0afb6936e1d8c203d76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a70058f2004fda0afb6936e1d8c203d76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ff6a309c8291909fd38cb55c338e8e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad5ff6a309c8291909fd38cb55c338e8e"></a>
<a class="el" href="classext_1_1linear__set.xhtml#a2550e4e69cdfa2421e3a9158a67a378a">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ad5ff6a309c8291909fd38cb55c338e8e">rend</a> () const </td></tr>
<tr class="memdesc:ad5ff6a309c8291909fd38cb55c338e8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:ad5ff6a309c8291909fd38cb55c338e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ab2eac7920acba8cbe6cf2018306ece46"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab2eac7920acba8cbe6cf2018306ece46"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#ab2eac7920acba8cbe6cf2018306ece46">swap</a> (<a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;lhs, <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;rhs) noexcept</td></tr>
<tr class="memdesc:ab2eac7920acba8cbe6cf2018306ece46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Friend swap definition for convenience sake. <br /></td></tr>
<tr class="separator:ab2eac7920acba8cbe6cf2018306ece46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a1b51a04e0aa75b25ac2b9148020cea77"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#a1b51a04e0aa75b25ac2b9148020cea77">operator==</a> (const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;lhs, const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;rhs)</td></tr>
<tr class="memdesc:a1b51a04e0aa75b25ac2b9148020cea77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-member equality test operators.  <a href="#a1b51a04e0aa75b25ac2b9148020cea77">More...</a><br /></td></tr>
<tr class="separator:a1b51a04e0aa75b25ac2b9148020cea77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af08bdd86d73ca92187b65e1ded716981"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__set.xhtml#af08bdd86d73ca92187b65e1ded716981">operator!=</a> (const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;lhs, const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a> &amp;rhs)</td></tr>
<tr class="memdesc:af08bdd86d73ca92187b65e1ded716981"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-member equality test operators.  <a href="#af08bdd86d73ca92187b65e1ded716981">More...</a><br /></td></tr>
<tr class="separator:af08bdd86d73ca92187b65e1ded716981"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt;<br />
class ext::linear_set&lt; Value, KeyFromValue, Sequence &gt;</h3>

<p>An adaptor set with lookup complexity O(N) based on sequence (contiguous structure by default). </p>
<p>This set is designed for a small number of elements. Consider this class a convenient wrapper around std::vector&lt;Value&gt;.</p>
<p>Since this set is based on the vector by default, the order of insertions is preserved, and it provides random access iterators.</p>
<p>Unlike STL sets, this set is designed like boost::multi_index or Python sets; that is, there is key retrieval (indexation) policy for values. Therefore, this set also acts like a map.</p>
<p>The major differences from the standard library sets:</p>
<p>0. Values are not const.</p>
<ol type="1">
<li>Iterators, references, pointers can be invalidated by modifier functions (insert, erase, reserve, etc.). This is the inherited behavior from std::vector.</li>
<li>Some API may be extra or missing.</li>
<li>Key extraction is not stored as member data. Instead, it is treated as a policy.</li>
</ol>
<p>The performance of the set critically depends on the number of entries, the size of the value, and the cost of comparing values for equality. The advantage of the <a class="el" href="classext_1_1linear__set.xhtml" title="An adaptor set with lookup complexity O(N) based on sequence (contiguous structure by default)...">linear_set</a> comes from cache-friendliness, and fewer CPU front-end and back-end stalls.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Value</td><td>The type of the values. </td></tr>
    <tr><td class="paramname">KeyFromValue</td><td>The key extraction functor. </td></tr>
    <tr><td class="paramname">Sequence</td><td>The underlying container type. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00076">76</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a51ce6ea725aac08f4b15a1741b629bd5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af73748cef52d3584358a22672af895cf">key_from_value</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::key_extractor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Value-to-key converter. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00142">142</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a69ed39f3d7df4fd4dd53a05f6a600f63"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds an entry in the set by key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to the entry, or <a class="el" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">end()</a> if not found. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00151">151</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

<p>Referenced by <a class="el" href="linear__set_8h_source.xhtml#l00172">ext::linear_set&lt; Attribute, AttributeKey &gt;::count()</a>, <a class="el" href="linear__set_8h_source.xhtml#l00250">ext::linear_set&lt; Attribute, AttributeKey &gt;::erase()</a>, <a class="el" href="element_8cc_source.xhtml#l00048">scram::mef::Element::GetAttribute()</a>, and <a class="el" href="element_8cc_source.xhtml#l00057">scram::mef::Element::RemoveAttribute()</a>.</p>

<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set_a69ed39f3d7df4fd4dd53a05f6a600f63_icgraph.svg" width="388" height="272"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a79c2cb408e4023d7c707ada979e9fef3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds an entry in the set by key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to the entry, or <a class="el" href="classext_1_1linear__set.xhtml#a155eaa9a4cd913286959ad03f01e2306">end()</a> if not found. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00158">158</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a0f3a1810658f8464438f195b876bd9bf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determines if an entry in the set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if there's an entry, 0 otherwise. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00172">172</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4802c2d5b142b5badc347ae6f4ac0025"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a value into the set if the equal value is not in the set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The new value to be inserted.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair of an iterator and insertion flag. The iterator points to possibly inserted entry, and the flag indicates whether the entry is actually inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00185">185</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

<p>Referenced by <a class="el" href="element_8cc_source.xhtml#l00035">scram::mef::Element::AddAttribute()</a>, <a class="el" href="linear__set_8h_source.xhtml#l00131">ext::linear_set&lt; Attribute, AttributeKey &gt;::linear_set()</a>, and <a class="el" href="element_8cc_source.xhtml#l00042">scram::mef::Element::SetAttribute()</a>.</p>

<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set_a4802c2d5b142b5badc347ae6f4ac0025_icgraph.svg" width="100%" height="437"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="abad7da128c7a2b33787f4688ddc93ef5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__set.xhtml#aa5b4815221a5b6a6d876629884b7535d">value_type</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a value into the set if the equal value is not in the set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The new value to be inserted.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair of an iterator and insertion flag. The iterator points to possibly inserted entry, and the flag indicates whether the entry is actually inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00193">193</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae06fae52a107a86748b4f42ba5228731"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<div class="memtemplate">
template&lt;typename Iterator &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>first1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>last1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a range of elements. </p>
<p>The range is not assumed to be unique.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Iterator</td><td>Iterator to the container with values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first1</td><td>The beginning of the range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last1</td><td>The end of the range. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00210">210</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac75cad225076e020d763915848242ec8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<div class="memtemplate">
template&lt;typename... Ts&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attempts to build and insert an entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments for the construction of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the entry, and a flag indicating if the insertion actually happened. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00224">224</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a83e0ac9e967737c9c15ead98e5f460fa"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry pointed by an iterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>An iterator pointing to the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing after the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00240">240</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

<p>Referenced by <a class="el" href="linear__set_8h_source.xhtml#l00250">ext::linear_set&lt; Attribute, AttributeKey &gt;::erase()</a>, and <a class="el" href="element_8cc_source.xhtml#l00057">scram::mef::Element::RemoveAttribute()</a>.</p>

<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set_a83e0ac9e967737c9c15ead98e5f460fa_icgraph.svg" width="402" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a085cc1d33bddedf017a936b066e232d0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry pointed by an iterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>An iterator pointing to the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing after the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00241">241</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1a08e9373da1ab3b63d05ddc0e75381b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml#a1014e3f486dd597b28aa4ff70822a31e">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry with a key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if the existing entry has been removed, 0 if there's no entry with the given key. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00250">250</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="abacf20e6be51e53d92ac985ca1b305cf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__set.xhtml">linear_set</a>&lt; Value, KeyFromValue, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps data with another linear set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>Another linear set. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00261">261</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a16d63e209ee9d60bafb48dbf3c91ca5a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The number of entries in the set. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00264">264</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a55ea71f293335ffde9c4176f56b528f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>true if there are no entries. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00267">267</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

<p>Referenced by <a class="el" href="serialization_8cc_source.xhtml#l00039">scram::mef::Serialize()</a>.</p>

<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set_a55ea71f293335ffde9c4176f56b528f2_icgraph.svg" width="378" height="62"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ab3e852c12ea7751ce992f5c814fb49fb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a>&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the linear set for a specified number of entries. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>The number of expected entries. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00275">275</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="af35d5d142b4f59aff56a3bac69d1ce1a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#a26c93cc15ad980e7e277d729b9f76d4e">size_type</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::capacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The capacity of the underlying container. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00278">278</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="aba3e3a6085b29b9ed94956d07abd19fd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a>&amp; <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The underlying data container. The container elements are ordered exactly as inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00283">283</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="aae9aa2b3ebf2e32189bf0a51a8a4ff11"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classext_1_1linear__set.xhtml#ac8d877fc359c39df4aecfca7163760ed">container_type</a>&amp; <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The underlying data container. The container elements are ordered exactly as inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00284">284</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5d6cd826ff28591b8c2dcd68f0f52e81"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read/write iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00288">288</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a155eaa9a4cd913286959ad03f01e2306"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#ad95c58e17580f18a7def2122e60c6c21">iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read/write iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00290">290</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

<p>Referenced by <a class="el" href="element_8cc_source.xhtml#l00048">scram::mef::Element::GetAttribute()</a>, and <a class="el" href="element_8cc_source.xhtml#l00057">scram::mef::Element::RemoveAttribute()</a>.</p>

<p><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__set_a155eaa9a4cd913286959ad03f01e2306_icgraph.svg" width="359" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a0a3c4b80965c3ad70f6a44371f9fcaa1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00295">295</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6d746768a670c3056e89f098e75ebb02"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00296">296</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="a0b995091d228291150ef7410f7c4af36"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00302">302</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad3446ce7b3f8775497a4e1d28103ec89"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__set.xhtml#af4e6760e6b3b86703b5ff659d55d8f98">const_iterator</a> <a class="el" href="classext_1_1linear__set.xhtml">ext::linear_set</a>&lt; Value, KeyFromValue, Sequence &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00303">303</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a1b51a04e0aa75b25ac2b9148020cea77"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a>&lt; Value, KeyFromValue, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a>&lt; Value, KeyFromValue, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Non-member equality test operators. </p>
<p>The complexity is O(N^2).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The order of elements is not relevant. If the order matters for equality, compare the underlying data containers directly. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00088">88</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<a class="anchor" id="af08bdd86d73ca92187b65e1ded716981"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Value, typename KeyFromValue = identity, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a>&lt; Value, KeyFromValue, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__set.xhtml">linear_set</a>&lt; Value, KeyFromValue, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Non-member equality test operators. </p>
<p>The complexity is O(N^2).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The order of elements is not relevant. If the order matters for equality, compare the underlying data containers directly. </dd></dl>

<p>Definition at line <a class="el" href="linear__set_8h_source.xhtml#l00095">95</a> of file <a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="linear__set_8h_source.xhtml">linear_set.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Feb 19 2018 00:21:32 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
