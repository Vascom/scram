/*
 * Copyright (C) 2014-2017 Olzhas Rakhimov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// @file env.cc.in
/// Implementation of Env class.
/// The variables are filled by CMake or discovered at run-time.

#include "env.h"

#include <boost/predef.h>

#if BOOST_OS_WINDOWS

#include <boost/dll/runtime_symbol_info.hpp>

/// Finds the installation directory on Windows.
///
/// @returns POSIX path to the installation directory.
///
/// @pre The main executable is located at "install_dir/bin/prog.exe".
///
/// @note This function will terminate the program if any system calls fail.
static std::string GetInstallPath() noexcept {
  return boost::dll::program_location()  // executable
      .parent_path()  // bin
      .parent_path()  // install
      .generic_string();  // POSIX format.
}
#else
// clang-format off
/// @returns Path to the installation directory known at compile-time.
static std::string GetInstallPath() { return "@CMAKE_INSTALL_PREFIX@"; }  // NOLINT
// clang-format on
#endif

namespace scram {

const std::string Env::kInstallDir_ = GetInstallPath();  // NOLINT

std::string Env::config_schema() {
  return kInstallDir_ + "/share/scram/config.rng";
}

std::string Env::input_schema() {
  return kInstallDir_ + "/share/scram/input.rng";
}

std::string Env::report_schema() {
  return kInstallDir_ + "/share/scram/report.rng";
}

}  // namespace scram
